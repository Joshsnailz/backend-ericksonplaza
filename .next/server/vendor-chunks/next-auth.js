"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-auth";
exports.ids = ["vendor-chunks/next-auth"];
exports.modules = {

/***/ "(rsc)/./node_modules/next-auth/index.js":
/*!*****************************************!*\
  !*** ./node_modules/next-auth/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthError: () => (/* reexport safe */ _auth_core_errors__WEBPACK_IMPORTED_MODULE_4__.AuthError),\n/* harmony export */   CredentialsSignin: () => (/* reexport safe */ _auth_core_errors__WEBPACK_IMPORTED_MODULE_4__.CredentialsSignin),\n/* harmony export */   customFetch: () => (/* reexport safe */ _auth_core__WEBPACK_IMPORTED_MODULE_0__.customFetch),\n/* harmony export */   \"default\": () => (/* binding */ NextAuth)\n/* harmony export */ });\n/* harmony import */ var _auth_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auth/core */ \"(rsc)/./node_modules/@auth/core/index.js\");\n/* harmony import */ var _lib_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/env.js */ \"(rsc)/./node_modules/next-auth/lib/env.js\");\n/* harmony import */ var _lib_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/index.js */ \"(rsc)/./node_modules/next-auth/lib/index.js\");\n/* harmony import */ var _lib_actions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/actions.js */ \"(rsc)/./node_modules/next-auth/lib/actions.js\");\n/* harmony import */ var _auth_core_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @auth/core/errors */ \"(rsc)/./node_modules/@auth/core/errors.js\");\n/**\n * _If you are looking to migrate from v4, visit the [Upgrade Guide (v5)](https://authjs.dev/getting-started/migrating-to-v5)._\n *\n * ## Installation\n *\n * ```bash npm2yarn\n * npm install next-auth@beta\n * ```\n *\n * ## Environment variable inference\n *\n * `NEXTAUTH_URL` and `NEXTAUTH_SECRET` have been inferred since v4.\n *\n * Since NextAuth.js v5 can also automatically infer environment variables that are prefixed with `AUTH_`.\n *\n * For example `AUTH_GITHUB_ID` and `AUTH_GITHUB_SECRET` will be used as the `clientId` and `clientSecret` options for the GitHub provider.\n *\n * :::tip\n * The environment variable name inferring has the following format for OAuth providers: `AUTH_{PROVIDER}_{ID|SECRET}`.\n *\n * `PROVIDER` is the uppercase snake case version of the provider's id, followed by either `ID` or `SECRET` respectively.\n * :::\n *\n * `AUTH_SECRET` and `AUTH_URL` are also aliased for `NEXTAUTH_SECRET` and `NEXTAUTH_URL` for consistency.\n *\n * To add social login to your app, the configuration becomes:\n *\n * ```ts title=\"auth.ts\"\n * import NextAuth from \"next-auth\"\n * import GitHub from \"next-auth/providers/github\"\n * export const { handlers, auth } = NextAuth({ providers: [ GitHub ] })\n * ```\n *\n * And the `.env.local` file:\n *\n * ```sh title=\".env.local\"\n * AUTH_GITHUB_ID=...\n * AUTH_GITHUB_SECRET=...\n * AUTH_SECRET=...\n * ```\n *\n * :::tip\n * In production, `AUTH_SECRET` is a required environment variable - if not set, NextAuth.js will throw an error. See [MissingSecretError](https://authjs.dev/reference/core/errors#missingsecret) for more details.\n * :::\n *\n * If you need to override the default values for a provider, you can still call it as a function `GitHub({...})` as before.\n *\n * ## Lazy initialization\n * You can also initialize NextAuth.js lazily (previously known as advanced intialization), which allows you to access the request context in the configuration in some cases, like Route Handlers, Middleware, API Routes or `getServerSideProps`.\n * The above example becomes:\n *\n * ```ts title=\"auth.ts\"\n * import NextAuth from \"next-auth\"\n * import GitHub from \"next-auth/providers/github\"\n * export const { handlers, auth } = NextAuth(req => {\n *  if (req) {\n *   console.log(req) // do something with the request\n *  }\n *  return { providers: [ GitHub ] }\n * })\n * ```\n *\n * :::tip\n * This is useful if you want to customize the configuration based on the request, for example, to add a different provider in staging/dev environments.\n * :::\n *\n * @module next-auth\n */ \n\n\n\n\n\n/**\n *  Initialize NextAuth.js.\n *\n *  @example\n * ```ts title=\"auth.ts\"\n * import NextAuth from \"next-auth\"\n * import GitHub from \"@auth/core/providers/github\"\n *\n * export const { handlers, auth } = NextAuth({ providers: [GitHub] })\n * ```\n *\n * Lazy initialization:\n *\n * @example\n * ```ts title=\"auth.ts\"\n * import NextAuth from \"next-auth\"\n * import GitHub from \"@auth/core/providers/github\"\n *\n * export const { handlers, auth } = NextAuth(async (req) => {\n *   console.log(req) // do something with the request\n *   return {\n *     providers: [GitHub],\n *   },\n * })\n * ```\n */ function NextAuth(config) {\n    if (typeof config === \"function\") {\n        const httpHandler = async (req)=>{\n            const _config = await config(req);\n            (0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.setEnvDefaults)(_config);\n            return (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.Auth)((0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.reqWithEnvURL)(req), _config);\n        };\n        return {\n            handlers: {\n                GET: httpHandler,\n                POST: httpHandler\n            },\n            // @ts-expect-error\n            auth: (0,_lib_index_js__WEBPACK_IMPORTED_MODULE_2__.initAuth)(config, (c)=>(0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.setEnvDefaults)(c)),\n            signIn: async (provider, options, authorizationParams)=>{\n                const _config = await config(undefined);\n                (0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.setEnvDefaults)(_config);\n                return (0,_lib_actions_js__WEBPACK_IMPORTED_MODULE_3__.signIn)(provider, options, authorizationParams, _config);\n            },\n            signOut: async (options)=>{\n                const _config = await config(undefined);\n                (0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.setEnvDefaults)(_config);\n                return (0,_lib_actions_js__WEBPACK_IMPORTED_MODULE_3__.signOut)(options, _config);\n            },\n            unstable_update: async (data)=>{\n                const _config = await config(undefined);\n                (0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.setEnvDefaults)(_config);\n                return (0,_lib_actions_js__WEBPACK_IMPORTED_MODULE_3__.update)(data, _config);\n            }\n        };\n    }\n    (0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.setEnvDefaults)(config);\n    const httpHandler = (req)=>(0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.Auth)((0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.reqWithEnvURL)(req), config);\n    return {\n        handlers: {\n            GET: httpHandler,\n            POST: httpHandler\n        },\n        // @ts-expect-error\n        auth: (0,_lib_index_js__WEBPACK_IMPORTED_MODULE_2__.initAuth)(config),\n        signIn: (provider, options, authorizationParams)=>{\n            return (0,_lib_actions_js__WEBPACK_IMPORTED_MODULE_3__.signIn)(provider, options, authorizationParams, config);\n        },\n        signOut: (options)=>{\n            return (0,_lib_actions_js__WEBPACK_IMPORTED_MODULE_3__.signOut)(options, config);\n        },\n        unstable_update: (data)=>{\n            return (0,_lib_actions_js__WEBPACK_IMPORTED_MODULE_3__.update)(data, config);\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC1hdXRoL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBbUVDLEdBQzhDO0FBQ2M7QUFDbkI7QUFDaUI7QUFDTTtBQUMxQztBQUN2Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXlCQyxHQUNjLFNBQVNVLFNBQVNDLE1BQU07SUFDbkMsSUFBSSxPQUFPQSxXQUFXLFlBQVk7UUFDOUIsTUFBTUMsY0FBYyxPQUFPQztZQUN2QixNQUFNQyxVQUFVLE1BQU1ILE9BQU9FO1lBQzdCViwyREFBY0EsQ0FBQ1c7WUFDZixPQUFPZCxnREFBSUEsQ0FBQ0UsMERBQWFBLENBQUNXLE1BQU1DO1FBQ3BDO1FBQ0EsT0FBTztZQUNIQyxVQUFVO2dCQUFFQyxLQUFLSjtnQkFBYUssTUFBTUw7WUFBWTtZQUNoRCxtQkFBbUI7WUFDbkJNLE1BQU1kLHVEQUFRQSxDQUFDTyxRQUFRLENBQUNRLElBQU1oQiwyREFBY0EsQ0FBQ2dCO1lBQzdDZCxRQUFRLE9BQU9lLFVBQVVDLFNBQVNDO2dCQUM5QixNQUFNUixVQUFVLE1BQU1ILE9BQU9ZO2dCQUM3QnBCLDJEQUFjQSxDQUFDVztnQkFDZixPQUFPVCx1REFBTUEsQ0FBQ2UsVUFBVUMsU0FBU0MscUJBQXFCUjtZQUMxRDtZQUNBUixTQUFTLE9BQU9lO2dCQUNaLE1BQU1QLFVBQVUsTUFBTUgsT0FBT1k7Z0JBQzdCcEIsMkRBQWNBLENBQUNXO2dCQUNmLE9BQU9SLHdEQUFPQSxDQUFDZSxTQUFTUDtZQUM1QjtZQUNBVSxpQkFBaUIsT0FBT0M7Z0JBQ3BCLE1BQU1YLFVBQVUsTUFBTUgsT0FBT1k7Z0JBQzdCcEIsMkRBQWNBLENBQUNXO2dCQUNmLE9BQU9QLHVEQUFNQSxDQUFDa0IsTUFBTVg7WUFDeEI7UUFDSjtJQUNKO0lBQ0FYLDJEQUFjQSxDQUFDUTtJQUNmLE1BQU1DLGNBQWMsQ0FBQ0MsTUFBUWIsZ0RBQUlBLENBQUNFLDBEQUFhQSxDQUFDVyxNQUFNRjtJQUN0RCxPQUFPO1FBQ0hJLFVBQVU7WUFBRUMsS0FBS0o7WUFBYUssTUFBTUw7UUFBWTtRQUNoRCxtQkFBbUI7UUFDbkJNLE1BQU1kLHVEQUFRQSxDQUFDTztRQUNmTixRQUFRLENBQUNlLFVBQVVDLFNBQVNDO1lBQ3hCLE9BQU9qQix1REFBTUEsQ0FBQ2UsVUFBVUMsU0FBU0MscUJBQXFCWDtRQUMxRDtRQUNBTCxTQUFTLENBQUNlO1lBQ04sT0FBT2Ysd0RBQU9BLENBQUNlLFNBQVNWO1FBQzVCO1FBQ0FhLGlCQUFpQixDQUFDQztZQUNkLE9BQU9sQix1REFBTUEsQ0FBQ2tCLE1BQU1kO1FBQ3hCO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsiL1VzZXJzL2pvc2hzbmFpbHovY29kZS9yZWFjdC9hZG1pbi1lcmlja3NvbnBsYXphL25vZGVfbW9kdWxlcy9uZXh0LWF1dGgvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBfSWYgeW91IGFyZSBsb29raW5nIHRvIG1pZ3JhdGUgZnJvbSB2NCwgdmlzaXQgdGhlIFtVcGdyYWRlIEd1aWRlICh2NSldKGh0dHBzOi8vYXV0aGpzLmRldi9nZXR0aW5nLXN0YXJ0ZWQvbWlncmF0aW5nLXRvLXY1KS5fXG4gKlxuICogIyMgSW5zdGFsbGF0aW9uXG4gKlxuICogYGBgYmFzaCBucG0yeWFyblxuICogbnBtIGluc3RhbGwgbmV4dC1hdXRoQGJldGFcbiAqIGBgYFxuICpcbiAqICMjIEVudmlyb25tZW50IHZhcmlhYmxlIGluZmVyZW5jZVxuICpcbiAqIGBORVhUQVVUSF9VUkxgIGFuZCBgTkVYVEFVVEhfU0VDUkVUYCBoYXZlIGJlZW4gaW5mZXJyZWQgc2luY2UgdjQuXG4gKlxuICogU2luY2UgTmV4dEF1dGguanMgdjUgY2FuIGFsc28gYXV0b21hdGljYWxseSBpbmZlciBlbnZpcm9ubWVudCB2YXJpYWJsZXMgdGhhdCBhcmUgcHJlZml4ZWQgd2l0aCBgQVVUSF9gLlxuICpcbiAqIEZvciBleGFtcGxlIGBBVVRIX0dJVEhVQl9JRGAgYW5kIGBBVVRIX0dJVEhVQl9TRUNSRVRgIHdpbGwgYmUgdXNlZCBhcyB0aGUgYGNsaWVudElkYCBhbmQgYGNsaWVudFNlY3JldGAgb3B0aW9ucyBmb3IgdGhlIEdpdEh1YiBwcm92aWRlci5cbiAqXG4gKiA6Ojp0aXBcbiAqIFRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSBuYW1lIGluZmVycmluZyBoYXMgdGhlIGZvbGxvd2luZyBmb3JtYXQgZm9yIE9BdXRoIHByb3ZpZGVyczogYEFVVEhfe1BST1ZJREVSfV97SUR8U0VDUkVUfWAuXG4gKlxuICogYFBST1ZJREVSYCBpcyB0aGUgdXBwZXJjYXNlIHNuYWtlIGNhc2UgdmVyc2lvbiBvZiB0aGUgcHJvdmlkZXIncyBpZCwgZm9sbG93ZWQgYnkgZWl0aGVyIGBJRGAgb3IgYFNFQ1JFVGAgcmVzcGVjdGl2ZWx5LlxuICogOjo6XG4gKlxuICogYEFVVEhfU0VDUkVUYCBhbmQgYEFVVEhfVVJMYCBhcmUgYWxzbyBhbGlhc2VkIGZvciBgTkVYVEFVVEhfU0VDUkVUYCBhbmQgYE5FWFRBVVRIX1VSTGAgZm9yIGNvbnNpc3RlbmN5LlxuICpcbiAqIFRvIGFkZCBzb2NpYWwgbG9naW4gdG8geW91ciBhcHAsIHRoZSBjb25maWd1cmF0aW9uIGJlY29tZXM6XG4gKlxuICogYGBgdHMgdGl0bGU9XCJhdXRoLnRzXCJcbiAqIGltcG9ydCBOZXh0QXV0aCBmcm9tIFwibmV4dC1hdXRoXCJcbiAqIGltcG9ydCBHaXRIdWIgZnJvbSBcIm5leHQtYXV0aC9wcm92aWRlcnMvZ2l0aHViXCJcbiAqIGV4cG9ydCBjb25zdCB7IGhhbmRsZXJzLCBhdXRoIH0gPSBOZXh0QXV0aCh7IHByb3ZpZGVyczogWyBHaXRIdWIgXSB9KVxuICogYGBgXG4gKlxuICogQW5kIHRoZSBgLmVudi5sb2NhbGAgZmlsZTpcbiAqXG4gKiBgYGBzaCB0aXRsZT1cIi5lbnYubG9jYWxcIlxuICogQVVUSF9HSVRIVUJfSUQ9Li4uXG4gKiBBVVRIX0dJVEhVQl9TRUNSRVQ9Li4uXG4gKiBBVVRIX1NFQ1JFVD0uLi5cbiAqIGBgYFxuICpcbiAqIDo6OnRpcFxuICogSW4gcHJvZHVjdGlvbiwgYEFVVEhfU0VDUkVUYCBpcyBhIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlIC0gaWYgbm90IHNldCwgTmV4dEF1dGguanMgd2lsbCB0aHJvdyBhbiBlcnJvci4gU2VlIFtNaXNzaW5nU2VjcmV0RXJyb3JdKGh0dHBzOi8vYXV0aGpzLmRldi9yZWZlcmVuY2UvY29yZS9lcnJvcnMjbWlzc2luZ3NlY3JldCkgZm9yIG1vcmUgZGV0YWlscy5cbiAqIDo6OlxuICpcbiAqIElmIHlvdSBuZWVkIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IHZhbHVlcyBmb3IgYSBwcm92aWRlciwgeW91IGNhbiBzdGlsbCBjYWxsIGl0IGFzIGEgZnVuY3Rpb24gYEdpdEh1Yih7Li4ufSlgIGFzIGJlZm9yZS5cbiAqXG4gKiAjIyBMYXp5IGluaXRpYWxpemF0aW9uXG4gKiBZb3UgY2FuIGFsc28gaW5pdGlhbGl6ZSBOZXh0QXV0aC5qcyBsYXppbHkgKHByZXZpb3VzbHkga25vd24gYXMgYWR2YW5jZWQgaW50aWFsaXphdGlvbiksIHdoaWNoIGFsbG93cyB5b3UgdG8gYWNjZXNzIHRoZSByZXF1ZXN0IGNvbnRleHQgaW4gdGhlIGNvbmZpZ3VyYXRpb24gaW4gc29tZSBjYXNlcywgbGlrZSBSb3V0ZSBIYW5kbGVycywgTWlkZGxld2FyZSwgQVBJIFJvdXRlcyBvciBgZ2V0U2VydmVyU2lkZVByb3BzYC5cbiAqIFRoZSBhYm92ZSBleGFtcGxlIGJlY29tZXM6XG4gKlxuICogYGBgdHMgdGl0bGU9XCJhdXRoLnRzXCJcbiAqIGltcG9ydCBOZXh0QXV0aCBmcm9tIFwibmV4dC1hdXRoXCJcbiAqIGltcG9ydCBHaXRIdWIgZnJvbSBcIm5leHQtYXV0aC9wcm92aWRlcnMvZ2l0aHViXCJcbiAqIGV4cG9ydCBjb25zdCB7IGhhbmRsZXJzLCBhdXRoIH0gPSBOZXh0QXV0aChyZXEgPT4ge1xuICogIGlmIChyZXEpIHtcbiAqICAgY29uc29sZS5sb2cocmVxKSAvLyBkbyBzb21ldGhpbmcgd2l0aCB0aGUgcmVxdWVzdFxuICogIH1cbiAqICByZXR1cm4geyBwcm92aWRlcnM6IFsgR2l0SHViIF0gfVxuICogfSlcbiAqIGBgYFxuICpcbiAqIDo6OnRpcFxuICogVGhpcyBpcyB1c2VmdWwgaWYgeW91IHdhbnQgdG8gY3VzdG9taXplIHRoZSBjb25maWd1cmF0aW9uIGJhc2VkIG9uIHRoZSByZXF1ZXN0LCBmb3IgZXhhbXBsZSwgdG8gYWRkIGEgZGlmZmVyZW50IHByb3ZpZGVyIGluIHN0YWdpbmcvZGV2IGVudmlyb25tZW50cy5cbiAqIDo6OlxuICpcbiAqIEBtb2R1bGUgbmV4dC1hdXRoXG4gKi9cbmltcG9ydCB7IEF1dGgsIGN1c3RvbUZldGNoIH0gZnJvbSBcIkBhdXRoL2NvcmVcIjtcbmltcG9ydCB7IHJlcVdpdGhFbnZVUkwsIHNldEVudkRlZmF1bHRzIH0gZnJvbSBcIi4vbGliL2Vudi5qc1wiO1xuaW1wb3J0IHsgaW5pdEF1dGggfSBmcm9tIFwiLi9saWIvaW5kZXguanNcIjtcbmltcG9ydCB7IHNpZ25Jbiwgc2lnbk91dCwgdXBkYXRlIH0gZnJvbSBcIi4vbGliL2FjdGlvbnMuanNcIjtcbmV4cG9ydCB7IEF1dGhFcnJvciwgQ3JlZGVudGlhbHNTaWduaW4gfSBmcm9tIFwiQGF1dGgvY29yZS9lcnJvcnNcIjtcbmV4cG9ydCB7IGN1c3RvbUZldGNoIH07XG4vKipcbiAqICBJbml0aWFsaXplIE5leHRBdXRoLmpzLlxuICpcbiAqICBAZXhhbXBsZVxuICogYGBgdHMgdGl0bGU9XCJhdXRoLnRzXCJcbiAqIGltcG9ydCBOZXh0QXV0aCBmcm9tIFwibmV4dC1hdXRoXCJcbiAqIGltcG9ydCBHaXRIdWIgZnJvbSBcIkBhdXRoL2NvcmUvcHJvdmlkZXJzL2dpdGh1YlwiXG4gKlxuICogZXhwb3J0IGNvbnN0IHsgaGFuZGxlcnMsIGF1dGggfSA9IE5leHRBdXRoKHsgcHJvdmlkZXJzOiBbR2l0SHViXSB9KVxuICogYGBgXG4gKlxuICogTGF6eSBpbml0aWFsaXphdGlvbjpcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdGl0bGU9XCJhdXRoLnRzXCJcbiAqIGltcG9ydCBOZXh0QXV0aCBmcm9tIFwibmV4dC1hdXRoXCJcbiAqIGltcG9ydCBHaXRIdWIgZnJvbSBcIkBhdXRoL2NvcmUvcHJvdmlkZXJzL2dpdGh1YlwiXG4gKlxuICogZXhwb3J0IGNvbnN0IHsgaGFuZGxlcnMsIGF1dGggfSA9IE5leHRBdXRoKGFzeW5jIChyZXEpID0+IHtcbiAqICAgY29uc29sZS5sb2cocmVxKSAvLyBkbyBzb21ldGhpbmcgd2l0aCB0aGUgcmVxdWVzdFxuICogICByZXR1cm4ge1xuICogICAgIHByb3ZpZGVyczogW0dpdEh1Yl0sXG4gKiAgIH0sXG4gKiB9KVxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE5leHRBdXRoKGNvbmZpZykge1xuICAgIGlmICh0eXBlb2YgY29uZmlnID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY29uc3QgaHR0cEhhbmRsZXIgPSBhc3luYyAocmVxKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBfY29uZmlnID0gYXdhaXQgY29uZmlnKHJlcSk7XG4gICAgICAgICAgICBzZXRFbnZEZWZhdWx0cyhfY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybiBBdXRoKHJlcVdpdGhFbnZVUkwocmVxKSwgX2NvbmZpZyk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoYW5kbGVyczogeyBHRVQ6IGh0dHBIYW5kbGVyLCBQT1NUOiBodHRwSGFuZGxlciB9LFxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgYXV0aDogaW5pdEF1dGgoY29uZmlnLCAoYykgPT4gc2V0RW52RGVmYXVsdHMoYykpLFxuICAgICAgICAgICAgc2lnbkluOiBhc3luYyAocHJvdmlkZXIsIG9wdGlvbnMsIGF1dGhvcml6YXRpb25QYXJhbXMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBfY29uZmlnID0gYXdhaXQgY29uZmlnKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgc2V0RW52RGVmYXVsdHMoX2NvbmZpZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpZ25Jbihwcm92aWRlciwgb3B0aW9ucywgYXV0aG9yaXphdGlvblBhcmFtcywgX2NvbmZpZyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2lnbk91dDogYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBfY29uZmlnID0gYXdhaXQgY29uZmlnKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgc2V0RW52RGVmYXVsdHMoX2NvbmZpZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpZ25PdXQob3B0aW9ucywgX2NvbmZpZyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5zdGFibGVfdXBkYXRlOiBhc3luYyAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IF9jb25maWcgPSBhd2FpdCBjb25maWcodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICBzZXRFbnZEZWZhdWx0cyhfY29uZmlnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlKGRhdGEsIF9jb25maWcpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc2V0RW52RGVmYXVsdHMoY29uZmlnKTtcbiAgICBjb25zdCBodHRwSGFuZGxlciA9IChyZXEpID0+IEF1dGgocmVxV2l0aEVudlVSTChyZXEpLCBjb25maWcpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGhhbmRsZXJzOiB7IEdFVDogaHR0cEhhbmRsZXIsIFBPU1Q6IGh0dHBIYW5kbGVyIH0sXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgYXV0aDogaW5pdEF1dGgoY29uZmlnKSxcbiAgICAgICAgc2lnbkluOiAocHJvdmlkZXIsIG9wdGlvbnMsIGF1dGhvcml6YXRpb25QYXJhbXMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzaWduSW4ocHJvdmlkZXIsIG9wdGlvbnMsIGF1dGhvcml6YXRpb25QYXJhbXMsIGNvbmZpZyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNpZ25PdXQ6IChvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc2lnbk91dChvcHRpb25zLCBjb25maWcpO1xuICAgICAgICB9LFxuICAgICAgICB1bnN0YWJsZV91cGRhdGU6IChkYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlKGRhdGEsIGNvbmZpZyk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJBdXRoIiwiY3VzdG9tRmV0Y2giLCJyZXFXaXRoRW52VVJMIiwic2V0RW52RGVmYXVsdHMiLCJpbml0QXV0aCIsInNpZ25JbiIsInNpZ25PdXQiLCJ1cGRhdGUiLCJBdXRoRXJyb3IiLCJDcmVkZW50aWFsc1NpZ25pbiIsIk5leHRBdXRoIiwiY29uZmlnIiwiaHR0cEhhbmRsZXIiLCJyZXEiLCJfY29uZmlnIiwiaGFuZGxlcnMiLCJHRVQiLCJQT1NUIiwiYXV0aCIsImMiLCJwcm92aWRlciIsIm9wdGlvbnMiLCJhdXRob3JpemF0aW9uUGFyYW1zIiwidW5kZWZpbmVkIiwidW5zdGFibGVfdXBkYXRlIiwiZGF0YSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next-auth/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next-auth/lib/actions.js":
/*!***********************************************!*\
  !*** ./node_modules/next-auth/lib/actions.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signIn: () => (/* binding */ signIn),\n/* harmony export */   signOut: () => (/* binding */ signOut),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\n/* harmony import */ var _auth_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auth/core */ \"(rsc)/./node_modules/@auth/core/index.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/navigation */ \"(rsc)/./node_modules/next/dist/api/navigation.react-server.js\");\n\n// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field\n\n// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field\n\nasync function signIn(provider, options = {}, authorizationParams, config) {\n    const headers = new Headers(await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.headers)());\n    const { redirect: shouldRedirect = true, redirectTo, ...rest } = options instanceof FormData ? Object.fromEntries(options) : options;\n    const callbackUrl = redirectTo?.toString() ?? headers.get(\"Referer\") ?? \"/\";\n    const signInURL = (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.createActionURL)(\"signin\", // @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default\n    headers.get(\"x-forwarded-proto\"), headers, process.env, config);\n    if (!provider) {\n        signInURL.searchParams.append(\"callbackUrl\", callbackUrl);\n        if (shouldRedirect) (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.redirect)(signInURL.toString());\n        return signInURL.toString();\n    }\n    let url = `${signInURL}/${provider}?${new URLSearchParams(authorizationParams)}`;\n    let foundProvider = {};\n    for (const providerConfig of config.providers){\n        const { options, ...defaults } = typeof providerConfig === \"function\" ? providerConfig() : providerConfig;\n        const id = options?.id ?? defaults.id;\n        if (id === provider) {\n            foundProvider = {\n                id,\n                type: options?.type ?? defaults.type\n            };\n            break;\n        }\n    }\n    if (!foundProvider.id) {\n        const url = `${signInURL}?${new URLSearchParams({\n            callbackUrl\n        })}`;\n        if (shouldRedirect) (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.redirect)(url);\n        return url;\n    }\n    if (foundProvider.type === \"credentials\") {\n        url = url.replace(\"signin\", \"callback\");\n    }\n    headers.set(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    const body = new URLSearchParams({\n        ...rest,\n        callbackUrl\n    });\n    const req = new Request(url, {\n        method: \"POST\",\n        headers,\n        body\n    });\n    const res = await (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.Auth)(req, {\n        ...config,\n        raw: _auth_core__WEBPACK_IMPORTED_MODULE_0__.raw,\n        skipCSRFCheck: _auth_core__WEBPACK_IMPORTED_MODULE_0__.skipCSRFCheck\n    });\n    const cookieJar = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    for (const c of res?.cookies ?? [])cookieJar.set(c.name, c.value, c.options);\n    const responseUrl = res instanceof Response ? res.headers.get(\"Location\") : res.redirect;\n    // NOTE: if for some unexpected reason the responseUrl is not set,\n    // we redirect to the original url\n    const redirectUrl = responseUrl ?? url;\n    if (shouldRedirect) return (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.redirect)(redirectUrl);\n    return redirectUrl;\n}\nasync function signOut(options, config) {\n    const headers = new Headers(await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.headers)());\n    headers.set(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    const url = (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.createActionURL)(\"signout\", // @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default\n    headers.get(\"x-forwarded-proto\"), headers, process.env, config);\n    const callbackUrl = options?.redirectTo ?? headers.get(\"Referer\") ?? \"/\";\n    const body = new URLSearchParams({\n        callbackUrl\n    });\n    const req = new Request(url, {\n        method: \"POST\",\n        headers,\n        body\n    });\n    const res = await (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.Auth)(req, {\n        ...config,\n        raw: _auth_core__WEBPACK_IMPORTED_MODULE_0__.raw,\n        skipCSRFCheck: _auth_core__WEBPACK_IMPORTED_MODULE_0__.skipCSRFCheck\n    });\n    const cookieJar = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    for (const c of res?.cookies ?? [])cookieJar.set(c.name, c.value, c.options);\n    if (options?.redirect ?? true) return (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.redirect)(res.redirect);\n    return res;\n}\nasync function update(data, config) {\n    const headers = new Headers(await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.headers)());\n    headers.set(\"Content-Type\", \"application/json\");\n    const url = (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.createActionURL)(\"session\", // @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default\n    headers.get(\"x-forwarded-proto\"), headers, process.env, config);\n    const body = JSON.stringify({\n        data\n    });\n    const req = new Request(url, {\n        method: \"POST\",\n        headers,\n        body\n    });\n    const res = await (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.Auth)(req, {\n        ...config,\n        raw: _auth_core__WEBPACK_IMPORTED_MODULE_0__.raw,\n        skipCSRFCheck: _auth_core__WEBPACK_IMPORTED_MODULE_0__.skipCSRFCheck\n    });\n    const cookieJar = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    for (const c of res?.cookies ?? [])cookieJar.set(c.name, c.value, c.options);\n    return res.body;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next-auth/lib/actions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next-auth/lib/env.js":
/*!*******************************************!*\
  !*** ./node_modules/next-auth/lib/env.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   reqWithEnvURL: () => (/* binding */ reqWithEnvURL),\n/* harmony export */   setEnvDefaults: () => (/* binding */ setEnvDefaults)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _auth_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @auth/core */ \"(rsc)/./node_modules/@auth/core/index.js\");\n// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field\n\n\n/** If `NEXTAUTH_URL` or `AUTH_URL` is defined, override the request's URL. */ function reqWithEnvURL(req) {\n    const url = process.env.AUTH_URL ?? process.env.NEXTAUTH_URL;\n    if (!url) return req;\n    const { origin: envOrigin } = new URL(url);\n    const { href, origin } = req.nextUrl;\n    return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextRequest(href.replace(origin, envOrigin), req);\n}\n/**\n * For backwards compatibility, `next-auth` checks for `NEXTAUTH_URL`\n * and the `basePath` by default is `/api/auth` instead of `/auth`\n * (which is the default for all other Auth.js integrations).\n *\n * For the same reason, `NEXTAUTH_SECRET` is also checked.\n */ function setEnvDefaults(config) {\n    try {\n        config.secret ?? (config.secret = process.env.AUTH_SECRET ?? process.env.NEXTAUTH_SECRET);\n        const url = process.env.AUTH_URL ?? process.env.NEXTAUTH_URL;\n        if (!url) return;\n        const { pathname } = new URL(url);\n        if (pathname === \"/\") return;\n        config.basePath || (config.basePath = pathname);\n    } catch  {\n    // Catching and swallowing potential URL parsing errors, we'll fall\n    // back to `/api/auth` below.\n    } finally{\n        config.basePath || (config.basePath = \"/api/auth\");\n        (0,_auth_core__WEBPACK_IMPORTED_MODULE_1__.setEnvDefaults)(process.env, config, true);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC1hdXRoL2xpYi9lbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHVGQUF1RjtBQUM3QztBQUN3QjtBQUNsRSw0RUFBNEUsR0FDckUsU0FBU0csY0FBY0MsR0FBRztJQUM3QixNQUFNQyxNQUFNQyxRQUFRQyxHQUFHLENBQUNDLFFBQVEsSUFBSUYsUUFBUUMsR0FBRyxDQUFDRSxZQUFZO0lBQzVELElBQUksQ0FBQ0osS0FDRCxPQUFPRDtJQUNYLE1BQU0sRUFBRU0sUUFBUUMsU0FBUyxFQUFFLEdBQUcsSUFBSUMsSUFBSVA7SUFDdEMsTUFBTSxFQUFFUSxJQUFJLEVBQUVILE1BQU0sRUFBRSxHQUFHTixJQUFJVSxPQUFPO0lBQ3BDLE9BQU8sSUFBSWQsb0RBQVdBLENBQUNhLEtBQUtFLE9BQU8sQ0FBQ0wsUUFBUUMsWUFBWVA7QUFDNUQ7QUFDQTs7Ozs7O0NBTUMsR0FDTSxTQUFTSCxlQUFlZSxNQUFNO0lBQ2pDLElBQUk7UUFDQUEsT0FBT0MsTUFBTSxJQUFLRCxDQUFBQSxPQUFPQyxNQUFNLEdBQUdYLFFBQVFDLEdBQUcsQ0FBQ1csV0FBVyxJQUFJWixRQUFRQyxHQUFHLENBQUNZLGVBQWU7UUFDeEYsTUFBTWQsTUFBTUMsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLElBQUlGLFFBQVFDLEdBQUcsQ0FBQ0UsWUFBWTtRQUM1RCxJQUFJLENBQUNKLEtBQ0Q7UUFDSixNQUFNLEVBQUVlLFFBQVEsRUFBRSxHQUFHLElBQUlSLElBQUlQO1FBQzdCLElBQUllLGFBQWEsS0FDYjtRQUNKSixPQUFPSyxRQUFRLElBQUtMLENBQUFBLE9BQU9LLFFBQVEsR0FBR0QsUUFBTztJQUNqRCxFQUNBLE9BQU07SUFDRixtRUFBbUU7SUFDbkUsNkJBQTZCO0lBQ2pDLFNBQ1E7UUFDSkosT0FBT0ssUUFBUSxJQUFLTCxDQUFBQSxPQUFPSyxRQUFRLEdBQUcsV0FBVTtRQUNoRG5CLDBEQUFrQkEsQ0FBQ0ksUUFBUUMsR0FBRyxFQUFFUyxRQUFRO0lBQzVDO0FBQ0oiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb3Noc25haWx6L2NvZGUvcmVhY3QvYWRtaW4tZXJpY2tzb25wbGF6YS9ub2RlX21vZHVsZXMvbmV4dC1hdXRoL2xpYi9lbnYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLWV4cGVjdC1lcnJvciBOZXh0LmpzIGRvZXMgbm90IHlldCBjb3JyZWN0bHkgdXNlIHRoZSBgcGFja2FnZS5qc29uI2V4cG9ydHNgIGZpZWxkXG5pbXBvcnQgeyBOZXh0UmVxdWVzdCB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuaW1wb3J0IHsgc2V0RW52RGVmYXVsdHMgYXMgY29yZVNldEVudkRlZmF1bHRzIH0gZnJvbSBcIkBhdXRoL2NvcmVcIjtcbi8qKiBJZiBgTkVYVEFVVEhfVVJMYCBvciBgQVVUSF9VUkxgIGlzIGRlZmluZWQsIG92ZXJyaWRlIHRoZSByZXF1ZXN0J3MgVVJMLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcVdpdGhFbnZVUkwocmVxKSB7XG4gICAgY29uc3QgdXJsID0gcHJvY2Vzcy5lbnYuQVVUSF9VUkwgPz8gcHJvY2Vzcy5lbnYuTkVYVEFVVEhfVVJMO1xuICAgIGlmICghdXJsKVxuICAgICAgICByZXR1cm4gcmVxO1xuICAgIGNvbnN0IHsgb3JpZ2luOiBlbnZPcmlnaW4gfSA9IG5ldyBVUkwodXJsKTtcbiAgICBjb25zdCB7IGhyZWYsIG9yaWdpbiB9ID0gcmVxLm5leHRVcmw7XG4gICAgcmV0dXJuIG5ldyBOZXh0UmVxdWVzdChocmVmLnJlcGxhY2Uob3JpZ2luLCBlbnZPcmlnaW4pLCByZXEpO1xufVxuLyoqXG4gKiBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIGBuZXh0LWF1dGhgIGNoZWNrcyBmb3IgYE5FWFRBVVRIX1VSTGBcbiAqIGFuZCB0aGUgYGJhc2VQYXRoYCBieSBkZWZhdWx0IGlzIGAvYXBpL2F1dGhgIGluc3RlYWQgb2YgYC9hdXRoYFxuICogKHdoaWNoIGlzIHRoZSBkZWZhdWx0IGZvciBhbGwgb3RoZXIgQXV0aC5qcyBpbnRlZ3JhdGlvbnMpLlxuICpcbiAqIEZvciB0aGUgc2FtZSByZWFzb24sIGBORVhUQVVUSF9TRUNSRVRgIGlzIGFsc28gY2hlY2tlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEVudkRlZmF1bHRzKGNvbmZpZykge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbmZpZy5zZWNyZXQgPz8gKGNvbmZpZy5zZWNyZXQgPSBwcm9jZXNzLmVudi5BVVRIX1NFQ1JFVCA/PyBwcm9jZXNzLmVudi5ORVhUQVVUSF9TRUNSRVQpO1xuICAgICAgICBjb25zdCB1cmwgPSBwcm9jZXNzLmVudi5BVVRIX1VSTCA/PyBwcm9jZXNzLmVudi5ORVhUQVVUSF9VUkw7XG4gICAgICAgIGlmICghdXJsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB7IHBhdGhuYW1lIH0gPSBuZXcgVVJMKHVybCk7XG4gICAgICAgIGlmIChwYXRobmFtZSA9PT0gXCIvXCIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbmZpZy5iYXNlUGF0aCB8fCAoY29uZmlnLmJhc2VQYXRoID0gcGF0aG5hbWUpO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIC8vIENhdGNoaW5nIGFuZCBzd2FsbG93aW5nIHBvdGVudGlhbCBVUkwgcGFyc2luZyBlcnJvcnMsIHdlJ2xsIGZhbGxcbiAgICAgICAgLy8gYmFjayB0byBgL2FwaS9hdXRoYCBiZWxvdy5cbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGNvbmZpZy5iYXNlUGF0aCB8fCAoY29uZmlnLmJhc2VQYXRoID0gXCIvYXBpL2F1dGhcIik7XG4gICAgICAgIGNvcmVTZXRFbnZEZWZhdWx0cyhwcm9jZXNzLmVudiwgY29uZmlnLCB0cnVlKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiTmV4dFJlcXVlc3QiLCJzZXRFbnZEZWZhdWx0cyIsImNvcmVTZXRFbnZEZWZhdWx0cyIsInJlcVdpdGhFbnZVUkwiLCJyZXEiLCJ1cmwiLCJwcm9jZXNzIiwiZW52IiwiQVVUSF9VUkwiLCJORVhUQVVUSF9VUkwiLCJvcmlnaW4iLCJlbnZPcmlnaW4iLCJVUkwiLCJocmVmIiwibmV4dFVybCIsInJlcGxhY2UiLCJjb25maWciLCJzZWNyZXQiLCJBVVRIX1NFQ1JFVCIsIk5FWFRBVVRIX1NFQ1JFVCIsInBhdGhuYW1lIiwiYmFzZVBhdGgiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next-auth/lib/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next-auth/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/next-auth/lib/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initAuth: () => (/* binding */ initAuth)\n/* harmony export */ });\n/* harmony import */ var _auth_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auth/core */ \"(rsc)/./node_modules/@auth/core/index.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./env.js */ \"(rsc)/./node_modules/next-auth/lib/env.js\");\n\n// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field\n\n// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field\n\n\nasync function getSession(headers, config) {\n    const url = (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.createActionURL)(\"session\", // @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default\n    headers.get(\"x-forwarded-proto\"), headers, process.env, config);\n    const request = new Request(url, {\n        headers: {\n            cookie: headers.get(\"cookie\") ?? \"\"\n        }\n    });\n    return (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.Auth)(request, {\n        ...config,\n        callbacks: {\n            ...config.callbacks,\n            // Since we are server-side, we don't need to filter out the session data\n            // See https://authjs.dev/getting-started/migrating-to-v5#authenticating-server-side\n            // TODO: Taint the session data to prevent accidental leakage to the client\n            // https://react.dev/reference/react/experimental_taintObjectReference\n            async session (...args) {\n                const session = // If the user defined a custom session callback, use that instead\n                await config.callbacks?.session?.(...args) ?? {\n                    ...args[0].session,\n                    expires: args[0].session.expires?.toISOString?.() ?? args[0].session.expires\n                };\n                const user = args[0].user ?? args[0].token;\n                return {\n                    user,\n                    ...session\n                };\n            }\n        }\n    });\n}\nfunction isReqWrapper(arg) {\n    return typeof arg === \"function\";\n}\nfunction initAuth(config, onLazyLoad // To set the default env vars\n) {\n    if (typeof config === \"function\") {\n        return async (...args)=>{\n            if (!args.length) {\n                // React Server Components\n                const _headers = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.headers)();\n                const _config = await config(undefined); // Review: Should we pass headers() here instead?\n                onLazyLoad?.(_config);\n                return getSession(_headers, _config).then((r)=>r.json());\n            }\n            if (args[0] instanceof Request) {\n                // middleware.ts inline\n                // export { auth as default } from \"auth\"\n                const req = args[0];\n                const ev = args[1];\n                const _config = await config(req);\n                onLazyLoad?.(_config);\n                // args[0] is supposed to be NextRequest but the instanceof check is failing.\n                return handleAuth([\n                    req,\n                    ev\n                ], _config);\n            }\n            if (isReqWrapper(args[0])) {\n                // middleware.ts wrapper/route.ts\n                // import { auth } from \"auth\"\n                // export default auth((req) => { console.log(req.auth) }})\n                const userMiddlewareOrRoute = args[0];\n                return async (...args)=>{\n                    const _config = await config(args[0]);\n                    onLazyLoad?.(_config);\n                    return handleAuth(args, _config, userMiddlewareOrRoute);\n                };\n            }\n            // API Routes, getServerSideProps\n            const request = \"req\" in args[0] ? args[0].req : args[0];\n            const response = \"res\" in args[0] ? args[0].res : args[1];\n            const _config = await config(request);\n            onLazyLoad?.(_config);\n            // @ts-expect-error -- request is NextRequest\n            return getSession(new Headers(request.headers), _config).then(async (authResponse)=>{\n                const auth = await authResponse.json();\n                for (const cookie of authResponse.headers.getSetCookie())if (\"headers\" in response) response.headers.append(\"set-cookie\", cookie);\n                else response.appendHeader(\"set-cookie\", cookie);\n                return auth;\n            });\n        };\n    }\n    return (...args)=>{\n        if (!args.length) {\n            // React Server Components\n            return Promise.resolve((0,next_headers__WEBPACK_IMPORTED_MODULE_1__.headers)()).then((h)=>getSession(h, config).then((r)=>r.json()));\n        }\n        if (args[0] instanceof Request) {\n            // middleware.ts inline\n            // export { auth as default } from \"auth\"\n            const req = args[0];\n            const ev = args[1];\n            return handleAuth([\n                req,\n                ev\n            ], config);\n        }\n        if (isReqWrapper(args[0])) {\n            // middleware.ts wrapper/route.ts\n            // import { auth } from \"auth\"\n            // export default auth((req) => { console.log(req.auth) }})\n            const userMiddlewareOrRoute = args[0];\n            return async (...args)=>{\n                return handleAuth(args, config, userMiddlewareOrRoute).then((res)=>{\n                    return res;\n                });\n            };\n        }\n        // API Routes, getServerSideProps\n        const request = \"req\" in args[0] ? args[0].req : args[0];\n        const response = \"res\" in args[0] ? args[0].res : args[1];\n        return getSession(// @ts-expect-error\n        new Headers(request.headers), config).then(async (authResponse)=>{\n            const auth = await authResponse.json();\n            for (const cookie of authResponse.headers.getSetCookie())if (\"headers\" in response) response.headers.append(\"set-cookie\", cookie);\n            else response.appendHeader(\"set-cookie\", cookie);\n            return auth;\n        });\n    };\n}\nasync function handleAuth(args, config, userMiddlewareOrRoute) {\n    const request = (0,_env_js__WEBPACK_IMPORTED_MODULE_3__.reqWithEnvURL)(args[0]);\n    const sessionResponse = await getSession(request.headers, config);\n    const auth = await sessionResponse.json();\n    let authorized = true;\n    if (config.callbacks?.authorized) {\n        authorized = await config.callbacks.authorized({\n            request,\n            auth\n        });\n    }\n    let response = next_server__WEBPACK_IMPORTED_MODULE_2__.NextResponse.next?.();\n    if (authorized instanceof Response) {\n        // User returned a custom response, like redirecting to a page or 401, respect it\n        response = authorized;\n        const redirect = authorized.headers.get(\"Location\");\n        const { pathname } = request.nextUrl;\n        // If the user is redirecting to the same NextAuth.js action path as the current request,\n        // don't allow the redirect to prevent an infinite loop\n        if (redirect && isSameAuthAction(pathname, new URL(redirect).pathname, config)) {\n            authorized = true;\n        }\n    } else if (userMiddlewareOrRoute) {\n        // Execute user's middleware/handler with the augmented request\n        const augmentedReq = request;\n        augmentedReq.auth = auth;\n        response = await userMiddlewareOrRoute(augmentedReq, args[1]) ?? next_server__WEBPACK_IMPORTED_MODULE_2__.NextResponse.next();\n    } else if (!authorized) {\n        const signInPage = config.pages?.signIn ?? `${config.basePath}/signin`;\n        if (request.nextUrl.pathname !== signInPage) {\n            // Redirect to signin page by default if not authorized\n            const signInUrl = request.nextUrl.clone();\n            signInUrl.pathname = signInPage;\n            signInUrl.searchParams.set(\"callbackUrl\", request.nextUrl.href);\n            response = next_server__WEBPACK_IMPORTED_MODULE_2__.NextResponse.redirect(signInUrl);\n        }\n    }\n    const finalResponse = new Response(response?.body, response);\n    // Preserve cookies from the session response\n    for (const cookie of sessionResponse.headers.getSetCookie())finalResponse.headers.append(\"set-cookie\", cookie);\n    return finalResponse;\n}\nfunction isSameAuthAction(requestPath, redirectPath, config) {\n    const action = redirectPath.replace(`${requestPath}/`, \"\");\n    const pages = Object.values(config.pages ?? {});\n    return (actions.has(action) || pages.includes(redirectPath)) && redirectPath === requestPath;\n}\nconst actions = new Set([\n    \"providers\",\n    \"session\",\n    \"csrf\",\n    \"signin\",\n    \"signout\",\n    \"callback\",\n    \"verify-request\",\n    \"error\"\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC1hdXRoL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFtRDtBQUNuRCx1RkFBdUY7QUFDaEQ7QUFDdkMsdUZBQXVGO0FBQzVDO0FBQ0Y7QUFDekMsZUFBZUssV0FBV0gsT0FBTyxFQUFFSSxNQUFNO0lBQ3JDLE1BQU1DLE1BQU1OLDJEQUFlQSxDQUFDLFdBQzVCLG1GQUFtRjtJQUNuRkMsUUFBUU0sR0FBRyxDQUFDLHNCQUFzQk4sU0FBU08sUUFBUUMsR0FBRyxFQUFFSjtJQUN4RCxNQUFNSyxVQUFVLElBQUlDLFFBQVFMLEtBQUs7UUFDN0JMLFNBQVM7WUFBRVcsUUFBUVgsUUFBUU0sR0FBRyxDQUFDLGFBQWE7UUFBRztJQUNuRDtJQUNBLE9BQU9SLGdEQUFJQSxDQUFDVyxTQUFTO1FBQ2pCLEdBQUdMLE1BQU07UUFDVFEsV0FBVztZQUNQLEdBQUdSLE9BQU9RLFNBQVM7WUFDbkIseUVBQXlFO1lBQ3pFLG9GQUFvRjtZQUNwRiwyRUFBMkU7WUFDM0Usc0VBQXNFO1lBQ3RFLE1BQU1DLFNBQVEsR0FBR0MsSUFBSTtnQkFDakIsTUFBTUQsVUFFTixrRUFEa0U7Z0JBQ2pFLE1BQU1ULE9BQU9RLFNBQVMsRUFBRUMsYUFBYUMsU0FBVTtvQkFDNUMsR0FBR0EsSUFBSSxDQUFDLEVBQUUsQ0FBQ0QsT0FBTztvQkFDbEJFLFNBQVNELElBQUksQ0FBQyxFQUFFLENBQUNELE9BQU8sQ0FBQ0UsT0FBTyxFQUFFQyxtQkFDOUJGLElBQUksQ0FBQyxFQUFFLENBQUNELE9BQU8sQ0FBQ0UsT0FBTztnQkFDL0I7Z0JBQ0EsTUFBTUUsT0FBT0gsSUFBSSxDQUFDLEVBQUUsQ0FBQ0csSUFBSSxJQUFJSCxJQUFJLENBQUMsRUFBRSxDQUFDSSxLQUFLO2dCQUMxQyxPQUFPO29CQUFFRDtvQkFBTSxHQUFHSixPQUFPO2dCQUFDO1lBQzlCO1FBQ0o7SUFDSjtBQUNKO0FBQ0EsU0FBU00sYUFBYUMsR0FBRztJQUNyQixPQUFP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TUFBTXZCLFVBQVVrQyxnQkFBZ0I3QyxPQUFPLENBQUN1QyxZQUFZLEdBQ3JEeUIsY0FBY2hFLE9BQU8sQ0FBQ3dDLE1BQU0sQ0FBQyxjQUFjN0I7SUFDL0MsT0FBT3FEO0FBQ1g7QUFDQSxTQUFTWixpQkFBaUJjLFdBQVcsRUFBRUMsWUFBWSxFQUFFL0QsTUFBTTtJQUN2RCxNQUFNZ0UsU0FBU0QsYUFBYUUsT0FBTyxDQUFDLEdBQUdILFlBQVksQ0FBQyxDQUFDLEVBQUU7SUFDdkQsTUFBTVYsUUFBUWMsT0FBT0MsTUFBTSxDQUFDbkUsT0FBT29ELEtBQUssSUFBSSxDQUFDO0lBQzdDLE9BQVEsQ0FBQ2dCLFFBQVFDLEdBQUcsQ0FBQ0wsV0FBV1osTUFBTWtCLFFBQVEsQ0FBQ1AsYUFBWSxLQUN2REEsaUJBQWlCRDtBQUN6QjtBQUNBLE1BQU1NLFVBQVUsSUFBSUcsSUFBSTtJQUNwQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0giLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb3Noc25haWx6L2NvZGUvcmVhY3QvYWRtaW4tZXJpY2tzb25wbGF6YS9ub2RlX21vZHVsZXMvbmV4dC1hdXRoL2xpYi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdXRoLCBjcmVhdGVBY3Rpb25VUkwgfSBmcm9tIFwiQGF1dGgvY29yZVwiO1xuLy8gQHRzLWV4cGVjdC1lcnJvciBOZXh0LmpzIGRvZXMgbm90IHlldCBjb3JyZWN0bHkgdXNlIHRoZSBgcGFja2FnZS5qc29uI2V4cG9ydHNgIGZpZWxkXG5pbXBvcnQgeyBoZWFkZXJzIH0gZnJvbSBcIm5leHQvaGVhZGVyc1wiO1xuLy8gQHRzLWV4cGVjdC1lcnJvciBOZXh0LmpzIGRvZXMgbm90IHlldCBjb3JyZWN0bHkgdXNlIHRoZSBgcGFja2FnZS5qc29uI2V4cG9ydHNgIGZpZWxkXG5pbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIjtcbmltcG9ydCB7IHJlcVdpdGhFbnZVUkwgfSBmcm9tIFwiLi9lbnYuanNcIjtcbmFzeW5jIGZ1bmN0aW9uIGdldFNlc3Npb24oaGVhZGVycywgY29uZmlnKSB7XG4gICAgY29uc3QgdXJsID0gY3JlYXRlQWN0aW9uVVJMKFwic2Vzc2lvblwiLCBcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGB4LWZvcndhcmRlZC1wcm90b2AgaXMgbm90IG51bGxhYmxlLCBuZXh0LmpzIHNldHMgaXQgYnkgZGVmYXVsdFxuICAgIGhlYWRlcnMuZ2V0KFwieC1mb3J3YXJkZWQtcHJvdG9cIiksIGhlYWRlcnMsIHByb2Nlc3MuZW52LCBjb25maWcpO1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIHtcbiAgICAgICAgaGVhZGVyczogeyBjb29raWU6IGhlYWRlcnMuZ2V0KFwiY29va2llXCIpID8/IFwiXCIgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gQXV0aChyZXF1ZXN0LCB7XG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICAuLi5jb25maWcuY2FsbGJhY2tzLFxuICAgICAgICAgICAgLy8gU2luY2Ugd2UgYXJlIHNlcnZlci1zaWRlLCB3ZSBkb24ndCBuZWVkIHRvIGZpbHRlciBvdXQgdGhlIHNlc3Npb24gZGF0YVxuICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vYXV0aGpzLmRldi9nZXR0aW5nLXN0YXJ0ZWQvbWlncmF0aW5nLXRvLXY1I2F1dGhlbnRpY2F0aW5nLXNlcnZlci1zaWRlXG4gICAgICAgICAgICAvLyBUT0RPOiBUYWludCB0aGUgc2Vzc2lvbiBkYXRhIHRvIHByZXZlbnQgYWNjaWRlbnRhbCBsZWFrYWdlIHRvIHRoZSBjbGllbnRcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vcmVhY3QuZGV2L3JlZmVyZW5jZS9yZWFjdC9leHBlcmltZW50YWxfdGFpbnRPYmplY3RSZWZlcmVuY2VcbiAgICAgICAgICAgIGFzeW5jIHNlc3Npb24oLi4uYXJncykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlc3Npb24gPSBcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBkZWZpbmVkIGEgY3VzdG9tIHNlc3Npb24gY2FsbGJhY2ssIHVzZSB0aGF0IGluc3RlYWRcbiAgICAgICAgICAgICAgICAoYXdhaXQgY29uZmlnLmNhbGxiYWNrcz8uc2Vzc2lvbj8uKC4uLmFyZ3MpKSA/PyB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmFyZ3NbMF0uc2Vzc2lvbixcbiAgICAgICAgICAgICAgICAgICAgZXhwaXJlczogYXJnc1swXS5zZXNzaW9uLmV4cGlyZXM/LnRvSVNPU3RyaW5nPy4oKSA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1swXS5zZXNzaW9uLmV4cGlyZXMsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyID0gYXJnc1swXS51c2VyID8/IGFyZ3NbMF0udG9rZW47XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdXNlciwgLi4uc2Vzc2lvbiB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGlzUmVxV3JhcHBlcihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gXCJmdW5jdGlvblwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGluaXRBdXRoKGNvbmZpZywgb25MYXp5TG9hZCAvLyBUbyBzZXQgdGhlIGRlZmF1bHQgZW52IHZhcnNcbikge1xuICAgIGlmICh0eXBlb2YgY29uZmlnID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGFzeW5jICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVhY3QgU2VydmVyIENvbXBvbmVudHNcbiAgICAgICAgICAgICAgICBjb25zdCBfaGVhZGVycyA9IGF3YWl0IGhlYWRlcnMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBfY29uZmlnID0gYXdhaXQgY29uZmlnKHVuZGVmaW5lZCk7IC8vIFJldmlldzogU2hvdWxkIHdlIHBhc3MgaGVhZGVycygpIGhlcmUgaW5zdGVhZD9cbiAgICAgICAgICAgICAgICBvbkxhenlMb2FkPy4oX2NvbmZpZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFNlc3Npb24oX2hlYWRlcnMsIF9jb25maWcpLnRoZW4oKHIpID0+IHIuanNvbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhcmdzWzBdIGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIC8vIG1pZGRsZXdhcmUudHMgaW5saW5lXG4gICAgICAgICAgICAgICAgLy8gZXhwb3J0IHsgYXV0aCBhcyBkZWZhdWx0IH0gZnJvbSBcImF1dGhcIlxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcSA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgZXYgPSBhcmdzWzFdO1xuICAgICAgICAgICAgICAgIGNvbnN0IF9jb25maWcgPSBhd2FpdCBjb25maWcocmVxKTtcbiAgICAgICAgICAgICAgICBvbkxhenlMb2FkPy4oX2NvbmZpZyk7XG4gICAgICAgICAgICAgICAgLy8gYXJnc1swXSBpcyBzdXBwb3NlZCB0byBiZSBOZXh0UmVxdWVzdCBidXQgdGhlIGluc3RhbmNlb2YgY2hlY2sgaXMgZmFpbGluZy5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlQXV0aChbcmVxLCBldl0sIF9jb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUmVxV3JhcHBlcihhcmdzWzBdKSkge1xuICAgICAgICAgICAgICAgIC8vIG1pZGRsZXdhcmUudHMgd3JhcHBlci9yb3V0ZS50c1xuICAgICAgICAgICAgICAgIC8vIGltcG9ydCB7IGF1dGggfSBmcm9tIFwiYXV0aFwiXG4gICAgICAgICAgICAgICAgLy8gZXhwb3J0IGRlZmF1bHQgYXV0aCgocmVxKSA9PiB7IGNvbnNvbGUubG9nKHJlcS5hdXRoKSB9fSlcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyTWlkZGxld2FyZU9yUm91dGUgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIHJldHVybiBhc3luYyAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBfY29uZmlnID0gYXdhaXQgY29uZmlnKGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICBvbkxhenlMb2FkPy4oX2NvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVBdXRoKGFyZ3MsIF9jb25maWcsIHVzZXJNaWRkbGV3YXJlT3JSb3V0ZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFQSSBSb3V0ZXMsIGdldFNlcnZlclNpZGVQcm9wc1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IFwicmVxXCIgaW4gYXJnc1swXSA/IGFyZ3NbMF0ucmVxIDogYXJnc1swXTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gXCJyZXNcIiBpbiBhcmdzWzBdID8gYXJnc1swXS5yZXMgOiBhcmdzWzFdO1xuICAgICAgICAgICAgY29uc3QgX2NvbmZpZyA9IGF3YWl0IGNvbmZpZyhyZXF1ZXN0KTtcbiAgICAgICAgICAgIG9uTGF6eUxvYWQ/LihfY29uZmlnKTtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLS0gcmVxdWVzdCBpcyBOZXh0UmVxdWVzdFxuICAgICAgICAgICAgcmV0dXJuIGdldFNlc3Npb24obmV3IEhlYWRlcnMocmVxdWVzdC5oZWFkZXJzKSwgX2NvbmZpZykudGhlbihhc3luYyAoYXV0aFJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXV0aCA9IGF3YWl0IGF1dGhSZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjb29raWUgb2YgYXV0aFJlc3BvbnNlLmhlYWRlcnMuZ2V0U2V0Q29va2llKCkpXG4gICAgICAgICAgICAgICAgICAgIGlmIChcImhlYWRlcnNcIiBpbiByZXNwb25zZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmhlYWRlcnMuYXBwZW5kKFwic2V0LWNvb2tpZVwiLCBjb29raWUpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5hcHBlbmRIZWFkZXIoXCJzZXQtY29va2llXCIsIGNvb2tpZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF1dGg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIFJlYWN0IFNlcnZlciBDb21wb25lbnRzXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhlYWRlcnMoKSkudGhlbigoaCkgPT4gZ2V0U2Vzc2lvbihoLCBjb25maWcpLnRoZW4oKHIpID0+IHIuanNvbigpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZ3NbMF0gaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgICAgICAgICAvLyBtaWRkbGV3YXJlLnRzIGlubGluZVxuICAgICAgICAgICAgLy8gZXhwb3J0IHsgYXV0aCBhcyBkZWZhdWx0IH0gZnJvbSBcImF1dGhcIlxuICAgICAgICAgICAgY29uc3QgcmVxID0gYXJnc1swXTtcbiAgICAgICAgICAgIGNvbnN0IGV2ID0gYXJnc1sxXTtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVBdXRoKFtyZXEsIGV2XSwgY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZXFXcmFwcGVyKGFyZ3NbMF0pKSB7XG4gICAgICAgICAgICAvLyBtaWRkbGV3YXJlLnRzIHdyYXBwZXIvcm91dGUudHNcbiAgICAgICAgICAgIC8vIGltcG9ydCB7IGF1dGggfSBmcm9tIFwiYXV0aFwiXG4gICAgICAgICAgICAvLyBleHBvcnQgZGVmYXVsdCBhdXRoKChyZXEpID0+IHsgY29uc29sZS5sb2cocmVxLmF1dGgpIH19KVxuICAgICAgICAgICAgY29uc3QgdXNlck1pZGRsZXdhcmVPclJvdXRlID0gYXJnc1swXTtcbiAgICAgICAgICAgIHJldHVybiBhc3luYyAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVBdXRoKGFyZ3MsIGNvbmZpZywgdXNlck1pZGRsZXdhcmVPclJvdXRlKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gQVBJIFJvdXRlcywgZ2V0U2VydmVyU2lkZVByb3BzXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBcInJlcVwiIGluIGFyZ3NbMF0gPyBhcmdzWzBdLnJlcSA6IGFyZ3NbMF07XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gXCJyZXNcIiBpbiBhcmdzWzBdID8gYXJnc1swXS5yZXMgOiBhcmdzWzFdO1xuICAgICAgICByZXR1cm4gZ2V0U2Vzc2lvbihcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICBuZXcgSGVhZGVycyhyZXF1ZXN0LmhlYWRlcnMpLCBjb25maWcpLnRoZW4oYXN5bmMgKGF1dGhSZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXV0aCA9IGF3YWl0IGF1dGhSZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvb2tpZSBvZiBhdXRoUmVzcG9uc2UuaGVhZGVycy5nZXRTZXRDb29raWUoKSlcbiAgICAgICAgICAgICAgICBpZiAoXCJoZWFkZXJzXCIgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmhlYWRlcnMuYXBwZW5kKFwic2V0LWNvb2tpZVwiLCBjb29raWUpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuYXBwZW5kSGVhZGVyKFwic2V0LWNvb2tpZVwiLCBjb29raWUpO1xuICAgICAgICAgICAgcmV0dXJuIGF1dGg7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5hc3luYyBmdW5jdGlvbiBoYW5kbGVBdXRoKGFyZ3MsIGNvbmZpZywgdXNlck1pZGRsZXdhcmVPclJvdXRlKSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IHJlcVdpdGhFbnZVUkwoYXJnc1swXSk7XG4gICAgY29uc3Qgc2Vzc2lvblJlc3BvbnNlID0gYXdhaXQgZ2V0U2Vzc2lvbihyZXF1ZXN0LmhlYWRlcnMsIGNvbmZpZyk7XG4gICAgY29uc3QgYXV0aCA9IGF3YWl0IHNlc3Npb25SZXNwb25zZS5qc29uKCk7XG4gICAgbGV0IGF1dGhvcml6ZWQgPSB0cnVlO1xuICAgIGlmIChjb25maWcuY2FsbGJhY2tzPy5hdXRob3JpemVkKSB7XG4gICAgICAgIGF1dGhvcml6ZWQgPSBhd2FpdCBjb25maWcuY2FsbGJhY2tzLmF1dGhvcml6ZWQoeyByZXF1ZXN0LCBhdXRoIH0pO1xuICAgIH1cbiAgICBsZXQgcmVzcG9uc2UgPSBOZXh0UmVzcG9uc2UubmV4dD8uKCk7XG4gICAgaWYgKGF1dGhvcml6ZWQgaW5zdGFuY2VvZiBSZXNwb25zZSkge1xuICAgICAgICAvLyBVc2VyIHJldHVybmVkIGEgY3VzdG9tIHJlc3BvbnNlLCBsaWtlIHJlZGlyZWN0aW5nIHRvIGEgcGFnZSBvciA0MDEsIHJlc3BlY3QgaXRcbiAgICAgICAgcmVzcG9uc2UgPSBhdXRob3JpemVkO1xuICAgICAgICBjb25zdCByZWRpcmVjdCA9IGF1dGhvcml6ZWQuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgICAgICAgY29uc3QgeyBwYXRobmFtZSB9ID0gcmVxdWVzdC5uZXh0VXJsO1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBpcyByZWRpcmVjdGluZyB0byB0aGUgc2FtZSBOZXh0QXV0aC5qcyBhY3Rpb24gcGF0aCBhcyB0aGUgY3VycmVudCByZXF1ZXN0LFxuICAgICAgICAvLyBkb24ndCBhbGxvdyB0aGUgcmVkaXJlY3QgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICAgIGlmIChyZWRpcmVjdCAmJlxuICAgICAgICAgICAgaXNTYW1lQXV0aEFjdGlvbihwYXRobmFtZSwgbmV3IFVSTChyZWRpcmVjdCkucGF0aG5hbWUsIGNvbmZpZykpIHtcbiAgICAgICAgICAgIGF1dGhvcml6ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHVzZXJNaWRkbGV3YXJlT3JSb3V0ZSkge1xuICAgICAgICAvLyBFeGVjdXRlIHVzZXIncyBtaWRkbGV3YXJlL2hhbmRsZXIgd2l0aCB0aGUgYXVnbWVudGVkIHJlcXVlc3RcbiAgICAgICAgY29uc3QgYXVnbWVudGVkUmVxID0gcmVxdWVzdDtcbiAgICAgICAgYXVnbWVudGVkUmVxLmF1dGggPSBhdXRoO1xuICAgICAgICByZXNwb25zZSA9XG4gICAgICAgICAgICAoYXdhaXQgdXNlck1pZGRsZXdhcmVPclJvdXRlKGF1Z21lbnRlZFJlcSwgYXJnc1sxXSkpID8/XG4gICAgICAgICAgICAgICAgTmV4dFJlc3BvbnNlLm5leHQoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWF1dGhvcml6ZWQpIHtcbiAgICAgICAgY29uc3Qgc2lnbkluUGFnZSA9IGNvbmZpZy5wYWdlcz8uc2lnbkluID8/IGAke2NvbmZpZy5iYXNlUGF0aH0vc2lnbmluYDtcbiAgICAgICAgaWYgKHJlcXVlc3QubmV4dFVybC5wYXRobmFtZSAhPT0gc2lnbkluUGFnZSkge1xuICAgICAgICAgICAgLy8gUmVkaXJlY3QgdG8gc2lnbmluIHBhZ2UgYnkgZGVmYXVsdCBpZiBub3QgYXV0aG9yaXplZFxuICAgICAgICAgICAgY29uc3Qgc2lnbkluVXJsID0gcmVxdWVzdC5uZXh0VXJsLmNsb25lKCk7XG4gICAgICAgICAgICBzaWduSW5VcmwucGF0aG5hbWUgPSBzaWduSW5QYWdlO1xuICAgICAgICAgICAgc2lnbkluVXJsLnNlYXJjaFBhcmFtcy5zZXQoXCJjYWxsYmFja1VybFwiLCByZXF1ZXN0Lm5leHRVcmwuaHJlZik7XG4gICAgICAgICAgICByZXNwb25zZSA9IE5leHRSZXNwb25zZS5yZWRpcmVjdChzaWduSW5VcmwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGZpbmFsUmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UocmVzcG9uc2U/LmJvZHksIHJlc3BvbnNlKTtcbiAgICAvLyBQcmVzZXJ2ZSBjb29raWVzIGZyb20gdGhlIHNlc3Npb24gcmVzcG9uc2VcbiAgICBmb3IgKGNvbnN0IGNvb2tpZSBvZiBzZXNzaW9uUmVzcG9uc2UuaGVhZGVycy5nZXRTZXRDb29raWUoKSlcbiAgICAgICAgZmluYWxSZXNwb25zZS5oZWFkZXJzLmFwcGVuZChcInNldC1jb29raWVcIiwgY29va2llKTtcbiAgICByZXR1cm4gZmluYWxSZXNwb25zZTtcbn1cbmZ1bmN0aW9uIGlzU2FtZUF1dGhBY3Rpb24ocmVxdWVzdFBhdGgsIHJlZGlyZWN0UGF0aCwgY29uZmlnKSB7XG4gICAgY29uc3QgYWN0aW9uID0gcmVkaXJlY3RQYXRoLnJlcGxhY2UoYCR7cmVxdWVzdFBhdGh9L2AsIFwiXCIpO1xuICAgIGNvbnN0IHBhZ2VzID0gT2JqZWN0LnZhbHVlcyhjb25maWcucGFnZXMgPz8ge30pO1xuICAgIHJldHVybiAoKGFjdGlvbnMuaGFzKGFjdGlvbikgfHwgcGFnZXMuaW5jbHVkZXMocmVkaXJlY3RQYXRoKSkgJiZcbiAgICAgICAgcmVkaXJlY3RQYXRoID09PSByZXF1ZXN0UGF0aCk7XG59XG5jb25zdCBhY3Rpb25zID0gbmV3IFNldChbXG4gICAgXCJwcm92aWRlcnNcIixcbiAgICBcInNlc3Npb25cIixcbiAgICBcImNzcmZcIixcbiAgICBcInNpZ25pblwiLFxuICAgIFwic2lnbm91dFwiLFxuICAgIFwiY2FsbGJhY2tcIixcbiAgICBcInZlcmlmeS1yZXF1ZXN0XCIsXG4gICAgXCJlcnJvclwiLFxuXSk7XG4iXSwibmFtZXMiOlsiQXV0aCIsImNyZWF0ZUFjdGlvblVSTCIsImhlYWRlcnMiLCJOZXh0UmVzcG9uc2UiLCJyZXFXaXRoRW52VVJMIiwiZ2V0U2Vzc2lvbiIsImNvbmZpZyIsInVybCIsImdldCIsInByb2Nlc3MiLCJlbnYiLCJyZXF1ZXN0IiwiUmVxdWVzdCIsImNvb2tpZSIsImNhbGxiYWNrcyIsInNlc3Npb24iLCJhcmdzIiwiZXhwaXJlcyIsInRvSVNPU3RyaW5nIiwidXNlciIsInRva2VuIiwiaXNSZXFXcmFwcGVyIiwiYXJnIiwiaW5pdEF1dGgiLCJvbkxhenlMb2FkIiwibGVuZ3RoIiwiX2hlYWRlcnMiLCJfY29uZmlnIiwidW5kZWZpbmVkIiwidGhlbiIsInIiLCJqc29uIiwicmVxIiwiZXYiLCJoYW5kbGVBdXRoIiwidXNlck1pZGRsZXdhcmVPclJvdXRlIiwicmVzcG9uc2UiLCJyZXMiLCJIZWFkZXJzIiwiYXV0aFJlc3BvbnNlIiwiYXV0aCIsImdldFNldENvb2tpZSIsImFwcGVuZCIsImFwcGVuZEhlYWRlciIsIlByb21pc2UiLCJyZXNvbHZlIiwiaCIsInNlc3Npb25SZXNwb25zZSIsImF1dGhvcml6ZWQiLCJuZXh0IiwiUmVzcG9uc2UiLCJyZWRpcmVjdCIsInBhdGhuYW1lIiwibmV4dFVybCIsImlzU2FtZUF1dGhBY3Rpb24iLCJVUkwiLCJhdWdtZW50ZWRSZXEiLCJzaWduSW5QYWdlIiwicGFnZXMiLCJzaWduSW4iLCJiYXNlUGF0aCIsInNpZ25JblVybCIsImNsb25lIiwic2VhcmNoUGFyYW1zIiwic2V0IiwiaHJlZiIsImZpbmFsUmVzcG9uc2UiLCJib2R5IiwicmVxdWVzdFBhdGgiLCJyZWRpcmVjdFBhdGgiLCJhY3Rpb24iLCJyZXBsYWNlIiwiT2JqZWN0IiwidmFsdWVzIiwiYWN0aW9ucyIsImhhcyIsImluY2x1ZGVzIiwiU2V0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next-auth/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next-auth/providers/credentials.js":
/*!*********************************************************!*\
  !*** ./node_modules/next-auth/providers/credentials.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _auth_core_providers_credentials__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _auth_core_providers_credentials__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auth/core/providers/credentials */ \"(rsc)/./node_modules/@auth/core/providers/credentials.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC1hdXRoL3Byb3ZpZGVycy9jcmVkZW50aWFscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRDtBQUNVIiwic291cmNlcyI6WyIvVXNlcnMvam9zaHNuYWlsei9jb2RlL3JlYWN0L2FkbWluLWVyaWNrc29ucGxhemEvbm9kZV9tb2R1bGVzL25leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIkBhdXRoL2NvcmUvcHJvdmlkZXJzL2NyZWRlbnRpYWxzXCI7XG5leHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIkBhdXRoL2NvcmUvcHJvdmlkZXJzL2NyZWRlbnRpYWxzXCI7XG4iXSwibmFtZXMiOlsiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next-auth/providers/credentials.js\n");

/***/ }),

/***/ "./node_modules/next-auth/index.js":
/*!*****************************************!*\
  !*** ./node_modules/next-auth/index.js ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthError: () => (/* reexport safe */ _auth_core_errors__WEBPACK_IMPORTED_MODULE_4__.AuthError),\n/* harmony export */   CredentialsSignin: () => (/* reexport safe */ _auth_core_errors__WEBPACK_IMPORTED_MODULE_4__.CredentialsSignin),\n/* harmony export */   customFetch: () => (/* reexport safe */ _auth_core__WEBPACK_IMPORTED_MODULE_0__.customFetch),\n/* harmony export */   \"default\": () => (/* binding */ NextAuth)\n/* harmony export */ });\n/* harmony import */ var _auth_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auth/core */ \"@auth/core\");\n/* harmony import */ var _lib_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/env.js */ \"./node_modules/next-auth/lib/env.js\");\n/* harmony import */ var _lib_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/index.js */ \"./node_modules/next-auth/lib/index.js\");\n/* harmony import */ var _lib_actions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/actions.js */ \"./node_modules/next-auth/lib/actions.js\");\n/* harmony import */ var _auth_core_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @auth/core/errors */ \"@auth/core/errors\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_auth_core__WEBPACK_IMPORTED_MODULE_0__, _lib_env_js__WEBPACK_IMPORTED_MODULE_1__, _lib_index_js__WEBPACK_IMPORTED_MODULE_2__, _lib_actions_js__WEBPACK_IMPORTED_MODULE_3__, _auth_core_errors__WEBPACK_IMPORTED_MODULE_4__]);\n([_auth_core__WEBPACK_IMPORTED_MODULE_0__, _lib_env_js__WEBPACK_IMPORTED_MODULE_1__, _lib_index_js__WEBPACK_IMPORTED_MODULE_2__, _lib_actions_js__WEBPACK_IMPORTED_MODULE_3__, _auth_core_errors__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/**\n * _If you are looking to migrate from v4, visit the [Upgrade Guide (v5)](https://authjs.dev/getting-started/migrating-to-v5)._\n *\n * ## Installation\n *\n * ```bash npm2yarn\n * npm install next-auth@beta\n * ```\n *\n * ## Environment variable inference\n *\n * `NEXTAUTH_URL` and `NEXTAUTH_SECRET` have been inferred since v4.\n *\n * Since NextAuth.js v5 can also automatically infer environment variables that are prefixed with `AUTH_`.\n *\n * For example `AUTH_GITHUB_ID` and `AUTH_GITHUB_SECRET` will be used as the `clientId` and `clientSecret` options for the GitHub provider.\n *\n * :::tip\n * The environment variable name inferring has the following format for OAuth providers: `AUTH_{PROVIDER}_{ID|SECRET}`.\n *\n * `PROVIDER` is the uppercase snake case version of the provider's id, followed by either `ID` or `SECRET` respectively.\n * :::\n *\n * `AUTH_SECRET` and `AUTH_URL` are also aliased for `NEXTAUTH_SECRET` and `NEXTAUTH_URL` for consistency.\n *\n * To add social login to your app, the configuration becomes:\n *\n * ```ts title=\"auth.ts\"\n * import NextAuth from \"next-auth\"\n * import GitHub from \"next-auth/providers/github\"\n * export const { handlers, auth } = NextAuth({ providers: [ GitHub ] })\n * ```\n *\n * And the `.env.local` file:\n *\n * ```sh title=\".env.local\"\n * AUTH_GITHUB_ID=...\n * AUTH_GITHUB_SECRET=...\n * AUTH_SECRET=...\n * ```\n *\n * :::tip\n * In production, `AUTH_SECRET` is a required environment variable - if not set, NextAuth.js will throw an error. See [MissingSecretError](https://authjs.dev/reference/core/errors#missingsecret) for more details.\n * :::\n *\n * If you need to override the default values for a provider, you can still call it as a function `GitHub({...})` as before.\n *\n * ## Lazy initialization\n * You can also initialize NextAuth.js lazily (previously known as advanced intialization), which allows you to access the request context in the configuration in some cases, like Route Handlers, Middleware, API Routes or `getServerSideProps`.\n * The above example becomes:\n *\n * ```ts title=\"auth.ts\"\n * import NextAuth from \"next-auth\"\n * import GitHub from \"next-auth/providers/github\"\n * export const { handlers, auth } = NextAuth(req => {\n *  if (req) {\n *   console.log(req) // do something with the request\n *  }\n *  return { providers: [ GitHub ] }\n * })\n * ```\n *\n * :::tip\n * This is useful if you want to customize the configuration based on the request, for example, to add a different provider in staging/dev environments.\n * :::\n *\n * @module next-auth\n */ \n\n\n\n\n\n/**\n *  Initialize NextAuth.js.\n *\n *  @example\n * ```ts title=\"auth.ts\"\n * import NextAuth from \"next-auth\"\n * import GitHub from \"@auth/core/providers/github\"\n *\n * export const { handlers, auth } = NextAuth({ providers: [GitHub] })\n * ```\n *\n * Lazy initialization:\n *\n * @example\n * ```ts title=\"auth.ts\"\n * import NextAuth from \"next-auth\"\n * import GitHub from \"@auth/core/providers/github\"\n *\n * export const { handlers, auth } = NextAuth(async (req) => {\n *   console.log(req) // do something with the request\n *   return {\n *     providers: [GitHub],\n *   },\n * })\n * ```\n */ function NextAuth(config) {\n    if (typeof config === \"function\") {\n        const httpHandler = async (req)=>{\n            const _config = await config(req);\n            (0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.setEnvDefaults)(_config);\n            return (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.Auth)((0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.reqWithEnvURL)(req), _config);\n        };\n        return {\n            handlers: {\n                GET: httpHandler,\n                POST: httpHandler\n            },\n            // @ts-expect-error\n            auth: (0,_lib_index_js__WEBPACK_IMPORTED_MODULE_2__.initAuth)(config, (c)=>(0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.setEnvDefaults)(c)),\n            signIn: async (provider, options, authorizationParams)=>{\n                const _config = await config(undefined);\n                (0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.setEnvDefaults)(_config);\n                return (0,_lib_actions_js__WEBPACK_IMPORTED_MODULE_3__.signIn)(provider, options, authorizationParams, _config);\n            },\n            signOut: async (options)=>{\n                const _config = await config(undefined);\n                (0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.setEnvDefaults)(_config);\n                return (0,_lib_actions_js__WEBPACK_IMPORTED_MODULE_3__.signOut)(options, _config);\n            },\n            unstable_update: async (data)=>{\n                const _config = await config(undefined);\n                (0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.setEnvDefaults)(_config);\n                return (0,_lib_actions_js__WEBPACK_IMPORTED_MODULE_3__.update)(data, _config);\n            }\n        };\n    }\n    (0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.setEnvDefaults)(config);\n    const httpHandler = (req)=>(0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.Auth)((0,_lib_env_js__WEBPACK_IMPORTED_MODULE_1__.reqWithEnvURL)(req), config);\n    return {\n        handlers: {\n            GET: httpHandler,\n            POST: httpHandler\n        },\n        // @ts-expect-error\n        auth: (0,_lib_index_js__WEBPACK_IMPORTED_MODULE_2__.initAuth)(config),\n        signIn: (provider, options, authorizationParams)=>{\n            return (0,_lib_actions_js__WEBPACK_IMPORTED_MODULE_3__.signIn)(provider, options, authorizationParams, config);\n        },\n        signOut: (options)=>{\n            return (0,_lib_actions_js__WEBPACK_IMPORTED_MODULE_3__.signOut)(options, config);\n        },\n        unstable_update: (data)=>{\n            return (0,_lib_actions_js__WEBPACK_IMPORTED_MODULE_3__.update)(data, config);\n        }\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next-auth/index.js\n");

/***/ }),

/***/ "./node_modules/next-auth/lib/actions.js":
/*!***********************************************!*\
  !*** ./node_modules/next-auth/lib/actions.js ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signIn: () => (/* binding */ signIn),\n/* harmony export */   signOut: () => (/* binding */ signOut),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\n/* harmony import */ var _auth_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auth/core */ \"@auth/core\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"./node_modules/next/headers.js\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/navigation */ \"./node_modules/next/navigation.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_auth_core__WEBPACK_IMPORTED_MODULE_0__]);\n_auth_core__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field\n\n// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field\n\nasync function signIn(provider, options = {}, authorizationParams, config) {\n    const headers = new Headers(await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.headers)());\n    const { redirect: shouldRedirect = true, redirectTo, ...rest } = options instanceof FormData ? Object.fromEntries(options) : options;\n    const callbackUrl = redirectTo?.toString() ?? headers.get(\"Referer\") ?? \"/\";\n    const signInURL = (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.createActionURL)(\"signin\", // @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default\n    headers.get(\"x-forwarded-proto\"), headers, process.env, config);\n    if (!provider) {\n        signInURL.searchParams.append(\"callbackUrl\", callbackUrl);\n        if (shouldRedirect) (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.redirect)(signInURL.toString());\n        return signInURL.toString();\n    }\n    let url = `${signInURL}/${provider}?${new URLSearchParams(authorizationParams)}`;\n    let foundProvider = {};\n    for (const providerConfig of config.providers){\n        const { options, ...defaults } = typeof providerConfig === \"function\" ? providerConfig() : providerConfig;\n        const id = options?.id ?? defaults.id;\n        if (id === provider) {\n            foundProvider = {\n                id,\n                type: options?.type ?? defaults.type\n            };\n            break;\n        }\n    }\n    if (!foundProvider.id) {\n        const url = `${signInURL}?${new URLSearchParams({\n            callbackUrl\n        })}`;\n        if (shouldRedirect) (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.redirect)(url);\n        return url;\n    }\n    if (foundProvider.type === \"credentials\") {\n        url = url.replace(\"signin\", \"callback\");\n    }\n    headers.set(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    const body = new URLSearchParams({\n        ...rest,\n        callbackUrl\n    });\n    const req = new Request(url, {\n        method: \"POST\",\n        headers,\n        body\n    });\n    const res = await (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.Auth)(req, {\n        ...config,\n        raw: _auth_core__WEBPACK_IMPORTED_MODULE_0__.raw,\n        skipCSRFCheck: _auth_core__WEBPACK_IMPORTED_MODULE_0__.skipCSRFCheck\n    });\n    const cookieJar = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    for (const c of res?.cookies ?? [])cookieJar.set(c.name, c.value, c.options);\n    const responseUrl = res instanceof Response ? res.headers.get(\"Location\") : res.redirect;\n    // NOTE: if for some unexpected reason the responseUrl is not set,\n    // we redirect to the original url\n    const redirectUrl = responseUrl ?? url;\n    if (shouldRedirect) return (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.redirect)(redirectUrl);\n    return redirectUrl;\n}\nasync function signOut(options, config) {\n    const headers = new Headers(await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.headers)());\n    headers.set(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    const url = (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.createActionURL)(\"signout\", // @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default\n    headers.get(\"x-forwarded-proto\"), headers, process.env, config);\n    const callbackUrl = options?.redirectTo ?? headers.get(\"Referer\") ?? \"/\";\n    const body = new URLSearchParams({\n        callbackUrl\n    });\n    const req = new Request(url, {\n        method: \"POST\",\n        headers,\n        body\n    });\n    const res = await (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.Auth)(req, {\n        ...config,\n        raw: _auth_core__WEBPACK_IMPORTED_MODULE_0__.raw,\n        skipCSRFCheck: _auth_core__WEBPACK_IMPORTED_MODULE_0__.skipCSRFCheck\n    });\n    const cookieJar = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    for (const c of res?.cookies ?? [])cookieJar.set(c.name, c.value, c.options);\n    if (options?.redirect ?? true) return (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.redirect)(res.redirect);\n    return res;\n}\nasync function update(data, config) {\n    const headers = new Headers(await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.headers)());\n    headers.set(\"Content-Type\", \"application/json\");\n    const url = (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.createActionURL)(\"session\", // @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default\n    headers.get(\"x-forwarded-proto\"), headers, process.env, config);\n    const body = JSON.stringify({\n        data\n    });\n    const req = new Request(url, {\n        method: \"POST\",\n        headers,\n        body\n    });\n    const res = await (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.Auth)(req, {\n        ...config,\n        raw: _auth_core__WEBPACK_IMPORTED_MODULE_0__.raw,\n        skipCSRFCheck: _auth_core__WEBPACK_IMPORTED_MODULE_0__.skipCSRFCheck\n    });\n    const cookieJar = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    for (const c of res?.cookies ?? [])cookieJar.set(c.name, c.value, c.options);\n    return res.body;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next-auth/lib/actions.js\n");

/***/ }),

/***/ "./node_modules/next-auth/lib/client.js":
/*!**********************************************!*\
  !*** ./node_modules/next-auth/lib/client.js ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientSessionError: () => (/* binding */ ClientSessionError),\n/* harmony export */   apiBaseUrl: () => (/* binding */ apiBaseUrl),\n/* harmony export */   fetchData: () => (/* binding */ fetchData),\n/* harmony export */   now: () => (/* binding */ now),\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl),\n/* harmony export */   useOnline: () => (/* binding */ useOnline)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var _auth_core_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @auth/core/errors */ \"@auth/core/errors\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_auth_core_errors__WEBPACK_IMPORTED_MODULE_1__]);\n_auth_core_errors__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* __next_internal_client_entry_do_not_use__ ClientSessionError,fetchData,apiBaseUrl,useOnline,now,parseUrl auto */ \n\n/** @todo */ class ClientFetchError extends _auth_core_errors__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n}\n/** @todo */ class ClientSessionError extends _auth_core_errors__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n}\n// ------------------------ Internal ------------------------\n/**\n * If passed 'appContext' via getInitialProps() in _app.js\n * then get the req object from ctx and use that for the\n * req value to allow `fetchData` to\n * work seemlessly in getInitialProps() on server side\n * pages *and* in _app.js.\n * @internal\n */ async function fetchData(path, __NEXTAUTH, logger, req = {}) {\n    const url = `${apiBaseUrl(__NEXTAUTH)}/${path}`;\n    try {\n        const options = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...req?.headers?.cookie ? {\n                    cookie: req.headers.cookie\n                } : {}\n            }\n        };\n        if (req?.body) {\n            options.body = JSON.stringify(req.body);\n            options.method = \"POST\";\n        }\n        const res = await fetch(url, options);\n        const data = await res.json();\n        if (!res.ok) throw data;\n        return data;\n    } catch (error) {\n        logger.error(new ClientFetchError(error.message, error));\n        return null;\n    }\n}\n/** @internal */ function apiBaseUrl(__NEXTAUTH) {\n    if (true) {\n        // Return absolute path when called server side\n        return `${__NEXTAUTH.baseUrlServer}${__NEXTAUTH.basePathServer}`;\n    }\n    // Return relative path when called client side\n    return __NEXTAUTH.basePath;\n}\n/** @internal  */ function useOnline() {\n    const [isOnline, setIsOnline] = react__WEBPACK_IMPORTED_MODULE_0__.useState(typeof navigator !== \"undefined\" ? navigator.onLine : false);\n    const setOnline = ()=>setIsOnline(true);\n    const setOffline = ()=>setIsOnline(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useOnline.useEffect\": ()=>{\n            window.addEventListener(\"online\", setOnline);\n            window.addEventListener(\"offline\", setOffline);\n            return ({\n                \"useOnline.useEffect\": ()=>{\n                    window.removeEventListener(\"online\", setOnline);\n                    window.removeEventListener(\"offline\", setOffline);\n                }\n            })[\"useOnline.useEffect\"];\n        }\n    }[\"useOnline.useEffect\"], []);\n    return isOnline;\n}\n/**\n * Returns the number of seconds elapsed since January 1, 1970 00:00:00 UTC.\n * @internal\n */ function now() {\n    return Math.floor(Date.now() / 1000);\n}\n/**\n * Returns an `URL` like object to make requests/redirects from server-side\n * @internal\n */ function parseUrl(url) {\n    const defaultUrl = new URL(\"http://localhost:3000/api/auth\");\n    if (url && !url.startsWith(\"http\")) {\n        url = `https://${url}`;\n    }\n    const _url = new URL(url || defaultUrl);\n    const path = (_url.pathname === \"/\" ? defaultUrl.pathname : _url.pathname)// Remove trailing slash\n    .replace(/\\/$/, \"\");\n    const base = `${_url.origin}${path}`;\n    return {\n        origin: _url.origin,\n        host: _url.host,\n        path,\n        base,\n        toString: ()=>base\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNBOEM7UUFDQUcsVUFBVSxJQUFNSDtJQUNwQjtBQUNKIiwic291cmNlcyI6WyIvVXNlcnMvam9zaHNuYWlsei9jb2RlL3JlYWN0L2FkbWluLWVyaWNrc29ucGxhemEvbm9kZV9tb2R1bGVzL25leHQtYXV0aC9saWIvY2xpZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBBdXRoRXJyb3IgfSBmcm9tIFwiQGF1dGgvY29yZS9lcnJvcnNcIjtcbi8qKiBAdG9kbyAqL1xuY2xhc3MgQ2xpZW50RmV0Y2hFcnJvciBleHRlbmRzIEF1dGhFcnJvciB7XG59XG4vKiogQHRvZG8gKi9cbmV4cG9ydCBjbGFzcyBDbGllbnRTZXNzaW9uRXJyb3IgZXh0ZW5kcyBBdXRoRXJyb3Ige1xufVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVybmFsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLyoqXG4gKiBJZiBwYXNzZWQgJ2FwcENvbnRleHQnIHZpYSBnZXRJbml0aWFsUHJvcHMoKSBpbiBfYXBwLmpzXG4gKiB0aGVuIGdldCB0aGUgcmVxIG9iamVjdCBmcm9tIGN0eCBhbmQgdXNlIHRoYXQgZm9yIHRoZVxuICogcmVxIHZhbHVlIHRvIGFsbG93IGBmZXRjaERhdGFgIHRvXG4gKiB3b3JrIHNlZW1sZXNzbHkgaW4gZ2V0SW5pdGlhbFByb3BzKCkgb24gc2VydmVyIHNpZGVcbiAqIHBhZ2VzICphbmQqIGluIF9hcHAuanMuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoRGF0YShwYXRoLCBfX05FWFRBVVRILCBsb2dnZXIsIHJlcSA9IHt9KSB7XG4gICAgY29uc3QgdXJsID0gYCR7YXBpQmFzZVVybChfX05FWFRBVVRIKX0vJHtwYXRofWA7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgICAgICAuLi4ocmVxPy5oZWFkZXJzPy5jb29raWUgPyB7IGNvb2tpZTogcmVxLmhlYWRlcnMuY29va2llIH0gOiB7fSksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBpZiAocmVxPy5ib2R5KSB7XG4gICAgICAgICAgICBvcHRpb25zLmJvZHkgPSBKU09OLnN0cmluZ2lmeShyZXEuYm9keSk7XG4gICAgICAgICAgICBvcHRpb25zLm1ldGhvZCA9IFwiUE9TVFwiO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgICBpZiAoIXJlcy5vaylcbiAgICAgICAgICAgIHRocm93IGRhdGE7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKG5ldyBDbGllbnRGZXRjaEVycm9yKGVycm9yLm1lc3NhZ2UsIGVycm9yKSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBhcGlCYXNlVXJsKF9fTkVYVEFVVEgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvLyBSZXR1cm4gYWJzb2x1dGUgcGF0aCB3aGVuIGNhbGxlZCBzZXJ2ZXIgc2lkZVxuICAgICAgICByZXR1cm4gYCR7X19ORVhUQVVUSC5iYXNlVXJsU2VydmVyfSR7X19ORVhUQVVUSC5iYXNlUGF0aFNlcnZlcn1gO1xuICAgIH1cbiAgICAvLyBSZXR1cm4gcmVsYXRpdmUgcGF0aCB3aGVuIGNhbGxlZCBjbGllbnQgc2lkZVxuICAgIHJldHVybiBfX05FWFRBVVRILmJhc2VQYXRoO1xufVxuLyoqIEBpbnRlcm5hbCAgKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VPbmxpbmUoKSB7XG4gICAgY29uc3QgW2lzT25saW5lLCBzZXRJc09ubGluZV0gPSBSZWFjdC51c2VTdGF0ZSh0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiID8gbmF2aWdhdG9yLm9uTGluZSA6IGZhbHNlKTtcbiAgICBjb25zdCBzZXRPbmxpbmUgPSAoKSA9PiBzZXRJc09ubGluZSh0cnVlKTtcbiAgICBjb25zdCBzZXRPZmZsaW5lID0gKCkgPT4gc2V0SXNPbmxpbmUoZmFsc2UpO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib25saW5lXCIsIHNldE9ubGluZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCBzZXRPZmZsaW5lKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib25saW5lXCIsIHNldE9ubGluZSk7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgc2V0T2ZmbGluZSk7XG4gICAgICAgIH07XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBpc09ubGluZTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHNlY29uZHMgZWxhcHNlZCBzaW5jZSBKYW51YXJ5IDEsIDE5NzAgMDA6MDA6MDAgVVRDLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3coKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIGBVUkxgIGxpa2Ugb2JqZWN0IHRvIG1ha2UgcmVxdWVzdHMvcmVkaXJlY3RzIGZyb20gc2VydmVyLXNpZGVcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVcmwodXJsKSB7XG4gICAgY29uc3QgZGVmYXVsdFVybCA9IG5ldyBVUkwoXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL2F1dGhcIik7XG4gICAgaWYgKHVybCAmJiAhdXJsLnN0YXJ0c1dpdGgoXCJodHRwXCIpKSB7XG4gICAgICAgIHVybCA9IGBodHRwczovLyR7dXJsfWA7XG4gICAgfVxuICAgIGNvbnN0IF91cmwgPSBuZXcgVVJMKHVybCB8fCBkZWZhdWx0VXJsKTtcbiAgICBjb25zdCBwYXRoID0gKF91cmwucGF0aG5hbWUgPT09IFwiL1wiID8gZGVmYXVsdFVybC5wYXRobmFtZSA6IF91cmwucGF0aG5hbWUpXG4gICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyBzbGFzaFxuICAgICAgICAucmVwbGFjZSgvXFwvJC8sIFwiXCIpO1xuICAgIGNvbnN0IGJhc2UgPSBgJHtfdXJsLm9yaWdpbn0ke3BhdGh9YDtcbiAgICByZXR1cm4ge1xuICAgICAgICBvcmlnaW46IF91cmwub3JpZ2luLFxuICAgICAgICBob3N0OiBfdXJsLmhvc3QsXG4gICAgICAgIHBhdGgsXG4gICAgICAgIGJhc2UsXG4gICAgICAgIHRvU3RyaW5nOiAoKSA9PiBiYXNlLFxuICAgIH07XG59XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJBdXRoRXJyb3IiLCJDbGllbnRGZXRjaEVycm9yIiwiQ2xpZW50U2Vzc2lvbkVycm9yIiwiZmV0Y2hEYXRhIiwicGF0aCIsIl9fTkVYVEFVVEgiLCJsb2dnZXIiLCJyZXEiLCJ1cmwiLCJhcGlCYXNlVXJsIiwib3B0aW9ucyIsImhlYWRlcnMiLCJjb29raWUiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsIm1ldGhvZCIsInJlcyIsImZldGNoIiwiZGF0YSIsImpzb24iLCJvayIsImVycm9yIiwibWVzc2FnZSIsImJhc2VVcmxTZXJ2ZXIiLCJiYXNlUGF0aFNlcnZlciIsImJhc2VQYXRoIiwidXNlT25saW5lIiwiaXNPbmxpbmUiLCJzZXRJc09ubGluZSIsInVzZVN0YXRlIiwibmF2aWdhdG9yIiwib25MaW5lIiwic2V0T25saW5lIiwic2V0T2ZmbGluZSIsInVzZUVmZmVjdCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibm93IiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsInBhcnNlVXJsIiwiZGVmYXVsdFVybCIsIlVSTCIsInN0YXJ0c1dpdGgiLCJfdXJsIiwicGF0aG5hbWUiLCJyZXBsYWNlIiwiYmFzZSIsIm9yaWdpbiIsImhvc3QiLCJ0b1N0cmluZyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next-auth/lib/client.js\n");

/***/ }),

/***/ "./node_modules/next-auth/lib/env.js":
/*!*******************************************!*\
  !*** ./node_modules/next-auth/lib/env.js ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   reqWithEnvURL: () => (/* binding */ reqWithEnvURL),\n/* harmony export */   setEnvDefaults: () => (/* binding */ setEnvDefaults)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"next/server\");\n/* harmony import */ var _auth_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @auth/core */ \"@auth/core\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_auth_core__WEBPACK_IMPORTED_MODULE_1__]);\n_auth_core__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field\n\n\n/** If `NEXTAUTH_URL` or `AUTH_URL` is defined, override the request's URL. */ function reqWithEnvURL(req) {\n    const url = process.env.AUTH_URL ?? process.env.NEXTAUTH_URL;\n    if (!url) return req;\n    const { origin: envOrigin } = new URL(url);\n    const { href, origin } = req.nextUrl;\n    return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextRequest(href.replace(origin, envOrigin), req);\n}\n/**\n * For backwards compatibility, `next-auth` checks for `NEXTAUTH_URL`\n * and the `basePath` by default is `/api/auth` instead of `/auth`\n * (which is the default for all other Auth.js integrations).\n *\n * For the same reason, `NEXTAUTH_SECRET` is also checked.\n */ function setEnvDefaults(config) {\n    try {\n        config.secret ?? (config.secret = process.env.AUTH_SECRET ?? process.env.NEXTAUTH_SECRET);\n        const url = process.env.AUTH_URL ?? process.env.NEXTAUTH_URL;\n        if (!url) return;\n        const { pathname } = new URL(url);\n        if (pathname === \"/\") return;\n        config.basePath || (config.basePath = pathname);\n    } catch  {\n    // Catching and swallowing potential URL parsing errors, we'll fall\n    // back to `/api/auth` below.\n    } finally{\n        config.basePath || (config.basePath = \"/api/auth\");\n        (0,_auth_core__WEBPACK_IMPORTED_MODULE_1__.setEnvDefaults)(process.env, config, true);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC1hdXRoL2xpYi9lbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHVGQUF1RjtBQUM3QztBQUN3QjtBQUNsRSw0RUFBNEUsR0FDckUsU0FBU0csY0FBY0MsR0FBRztJQUM3QixNQUFNQyxNQUFNQyxRQUFRQyxHQUFHLENBQUNDLFFBQVEsSUFBSUYsUUFBUUMsR0FBRyxDQUFDRSxZQUFZO0lBQzVELElBQUksQ0FBQ0osS0FDRCxPQUFPRDtJQUNYLE1BQU0sRUFBRU0sUUFBUUMsU0FBUyxFQUFFLEdBQUcsSUFBSUMsSUFBSVA7SUFDdEMsTUFBTSxFQUFFUSxJQUFJLEVBQUVILE1BQU0sRUFBRSxHQUFHTixJQUFJVSxPQUFPO0lBQ3BDLE9BQU8sSUFBSWQsb0RBQVdBLENBQUNhLEtBQUtFLE9BQU8sQ0FBQ0wsUUFBUUMsWUFBWVA7QUFDNUQ7QUFDQTs7Ozs7O0NBTUMsR0FDTSxTQUFTSCxlQUFlZSxNQUFNO0lBQ2pDLElBQUk7UUFDQUEsT0FBT0MsTUFBTSxJQUFLRCxDQUFBQSxPQUFPQyxNQUFNLEdBQUdYLFFBQVFDLEdBQUcsQ0FBQ1csV0FBVyxJQUFJWixRQUFRQyxHQUFHLENBQUNZLGVBQWU7UUFDeEYsTUFBTWQsTUFBTUMsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLElBQUlGLFFBQVFDLEdBQUcsQ0FBQ0UsWUFBWTtRQUM1RCxJQUFJLENBQUNKLEtBQ0Q7UUFDSixNQUFNLEVBQUVlLFFBQVEsRUFBRSxHQUFHLElBQUlSLElBQUlQO1FBQzdCLElBQUllLGFBQWEsS0FDYjtRQUNKSixPQUFPSyxRQUFRLElBQUtMLENBQUFBLE9BQU9LLFFBQVEsR0FBR0QsUUFBTztJQUNqRCxFQUNBLE9BQU07SUFDRixtRUFBbUU7SUFDbkUsNkJBQTZCO0lBQ2pDLFNBQ1E7UUFDSkosT0FBT0ssUUFBUSxJQUFLTCxDQUFBQSxPQUFPSyxRQUFRLEdBQUcsV0FBVTtRQUNoRG5CLDBEQUFrQkEsQ0FBQ0ksUUFBUUMsR0FBRyxFQUFFUyxRQUFRO0lBQzVDO0FBQ0oiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb3Noc25haWx6L2NvZGUvcmVhY3QvYWRtaW4tZXJpY2tzb25wbGF6YS9ub2RlX21vZHVsZXMvbmV4dC1hdXRoL2xpYi9lbnYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLWV4cGVjdC1lcnJvciBOZXh0LmpzIGRvZXMgbm90IHlldCBjb3JyZWN0bHkgdXNlIHRoZSBgcGFja2FnZS5qc29uI2V4cG9ydHNgIGZpZWxkXG5pbXBvcnQgeyBOZXh0UmVxdWVzdCB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuaW1wb3J0IHsgc2V0RW52RGVmYXVsdHMgYXMgY29yZVNldEVudkRlZmF1bHRzIH0gZnJvbSBcIkBhdXRoL2NvcmVcIjtcbi8qKiBJZiBgTkVYVEFVVEhfVVJMYCBvciBgQVVUSF9VUkxgIGlzIGRlZmluZWQsIG92ZXJyaWRlIHRoZSByZXF1ZXN0J3MgVVJMLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcVdpdGhFbnZVUkwocmVxKSB7XG4gICAgY29uc3QgdXJsID0gcHJvY2Vzcy5lbnYuQVVUSF9VUkwgPz8gcHJvY2Vzcy5lbnYuTkVYVEFVVEhfVVJMO1xuICAgIGlmICghdXJsKVxuICAgICAgICByZXR1cm4gcmVxO1xuICAgIGNvbnN0IHsgb3JpZ2luOiBlbnZPcmlnaW4gfSA9IG5ldyBVUkwodXJsKTtcbiAgICBjb25zdCB7IGhyZWYsIG9yaWdpbiB9ID0gcmVxLm5leHRVcmw7XG4gICAgcmV0dXJuIG5ldyBOZXh0UmVxdWVzdChocmVmLnJlcGxhY2Uob3JpZ2luLCBlbnZPcmlnaW4pLCByZXEpO1xufVxuLyoqXG4gKiBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIGBuZXh0LWF1dGhgIGNoZWNrcyBmb3IgYE5FWFRBVVRIX1VSTGBcbiAqIGFuZCB0aGUgYGJhc2VQYXRoYCBieSBkZWZhdWx0IGlzIGAvYXBpL2F1dGhgIGluc3RlYWQgb2YgYC9hdXRoYFxuICogKHdoaWNoIGlzIHRoZSBkZWZhdWx0IGZvciBhbGwgb3RoZXIgQXV0aC5qcyBpbnRlZ3JhdGlvbnMpLlxuICpcbiAqIEZvciB0aGUgc2FtZSByZWFzb24sIGBORVhUQVVUSF9TRUNSRVRgIGlzIGFsc28gY2hlY2tlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEVudkRlZmF1bHRzKGNvbmZpZykge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbmZpZy5zZWNyZXQgPz8gKGNvbmZpZy5zZWNyZXQgPSBwcm9jZXNzLmVudi5BVVRIX1NFQ1JFVCA/PyBwcm9jZXNzLmVudi5ORVhUQVVUSF9TRUNSRVQpO1xuICAgICAgICBjb25zdCB1cmwgPSBwcm9jZXNzLmVudi5BVVRIX1VSTCA/PyBwcm9jZXNzLmVudi5ORVhUQVVUSF9VUkw7XG4gICAgICAgIGlmICghdXJsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB7IHBhdGhuYW1lIH0gPSBuZXcgVVJMKHVybCk7XG4gICAgICAgIGlmIChwYXRobmFtZSA9PT0gXCIvXCIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbmZpZy5iYXNlUGF0aCB8fCAoY29uZmlnLmJhc2VQYXRoID0gcGF0aG5hbWUpO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIC8vIENhdGNoaW5nIGFuZCBzd2FsbG93aW5nIHBvdGVudGlhbCBVUkwgcGFyc2luZyBlcnJvcnMsIHdlJ2xsIGZhbGxcbiAgICAgICAgLy8gYmFjayB0byBgL2FwaS9hdXRoYCBiZWxvdy5cbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGNvbmZpZy5iYXNlUGF0aCB8fCAoY29uZmlnLmJhc2VQYXRoID0gXCIvYXBpL2F1dGhcIik7XG4gICAgICAgIGNvcmVTZXRFbnZEZWZhdWx0cyhwcm9jZXNzLmVudiwgY29uZmlnLCB0cnVlKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiTmV4dFJlcXVlc3QiLCJzZXRFbnZEZWZhdWx0cyIsImNvcmVTZXRFbnZEZWZhdWx0cyIsInJlcVdpdGhFbnZVUkwiLCJyZXEiLCJ1cmwiLCJwcm9jZXNzIiwiZW52IiwiQVVUSF9VUkwiLCJORVhUQVVUSF9VUkwiLCJvcmlnaW4iLCJlbnZPcmlnaW4iLCJVUkwiLCJocmVmIiwibmV4dFVybCIsInJlcGxhY2UiLCJjb25maWciLCJzZWNyZXQiLCJBVVRIX1NFQ1JFVCIsIk5FWFRBVVRIX1NFQ1JFVCIsInBhdGhuYW1lIiwiYmFzZVBhdGgiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next-auth/lib/env.js\n");

/***/ }),

/***/ "./node_modules/next-auth/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/next-auth/lib/index.js ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initAuth: () => (/* binding */ initAuth)\n/* harmony export */ });\n/* harmony import */ var _auth_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auth/core */ \"@auth/core\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"./node_modules/next/headers.js\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/server */ \"next/server\");\n/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./env.js */ \"./node_modules/next-auth/lib/env.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_auth_core__WEBPACK_IMPORTED_MODULE_0__, _env_js__WEBPACK_IMPORTED_MODULE_3__]);\n([_auth_core__WEBPACK_IMPORTED_MODULE_0__, _env_js__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field\n\n// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field\n\n\nasync function getSession(headers, config) {\n    const url = (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.createActionURL)(\"session\", // @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default\n    headers.get(\"x-forwarded-proto\"), headers, process.env, config);\n    const request = new Request(url, {\n        headers: {\n            cookie: headers.get(\"cookie\") ?? \"\"\n        }\n    });\n    return (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.Auth)(request, {\n        ...config,\n        callbacks: {\n            ...config.callbacks,\n            // Since we are server-side, we don't need to filter out the session data\n            // See https://authjs.dev/getting-started/migrating-to-v5#authenticating-server-side\n            // TODO: Taint the session data to prevent accidental leakage to the client\n            // https://react.dev/reference/react/experimental_taintObjectReference\n            async session (...args) {\n                const session = // If the user defined a custom session callback, use that instead\n                await config.callbacks?.session?.(...args) ?? {\n                    ...args[0].session,\n                    expires: args[0].session.expires?.toISOString?.() ?? args[0].session.expires\n                };\n                const user = args[0].user ?? args[0].token;\n                return {\n                    user,\n                    ...session\n                };\n            }\n        }\n    });\n}\nfunction isReqWrapper(arg) {\n    return typeof arg === \"function\";\n}\nfunction initAuth(config, onLazyLoad // To set the default env vars\n) {\n    if (typeof config === \"function\") {\n        return async (...args)=>{\n            if (!args.length) {\n                // React Server Components\n                const _headers = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.headers)();\n                const _config = await config(undefined); // Review: Should we pass headers() here instead?\n                onLazyLoad?.(_config);\n                return getSession(_headers, _config).then((r)=>r.json());\n            }\n            if (args[0] instanceof Request) {\n                // middleware.ts inline\n                // export { auth as default } from \"auth\"\n                const req = args[0];\n                const ev = args[1];\n                const _config = await config(req);\n                onLazyLoad?.(_config);\n                // args[0] is supposed to be NextRequest but the instanceof check is failing.\n                return handleAuth([\n                    req,\n                    ev\n                ], _config);\n            }\n            if (isReqWrapper(args[0])) {\n                // middleware.ts wrapper/route.ts\n                // import { auth } from \"auth\"\n                // export default auth((req) => { console.log(req.auth) }})\n                const userMiddlewareOrRoute = args[0];\n                return async (...args)=>{\n                    const _config = await config(args[0]);\n                    onLazyLoad?.(_config);\n                    return handleAuth(args, _config, userMiddlewareOrRoute);\n                };\n            }\n            // API Routes, getServerSideProps\n            const request = \"req\" in args[0] ? args[0].req : args[0];\n            const response = \"res\" in args[0] ? args[0].res : args[1];\n            const _config = await config(request);\n            onLazyLoad?.(_config);\n            // @ts-expect-error -- request is NextRequest\n            return getSession(new Headers(request.headers), _config).then(async (authResponse)=>{\n                const auth = await authResponse.json();\n                for (const cookie of authResponse.headers.getSetCookie())if (\"headers\" in response) response.headers.append(\"set-cookie\", cookie);\n                else response.appendHeader(\"set-cookie\", cookie);\n                return auth;\n            });\n        };\n    }\n    return (...args)=>{\n        if (!args.length) {\n            // React Server Components\n            return Promise.resolve((0,next_headers__WEBPACK_IMPORTED_MODULE_1__.headers)()).then((h)=>getSession(h, config).then((r)=>r.json()));\n        }\n        if (args[0] instanceof Request) {\n            // middleware.ts inline\n            // export { auth as default } from \"auth\"\n            const req = args[0];\n            const ev = args[1];\n            return handleAuth([\n                req,\n                ev\n            ], config);\n        }\n        if (isReqWrapper(args[0])) {\n            // middleware.ts wrapper/route.ts\n            // import { auth } from \"auth\"\n            // export default auth((req) => { console.log(req.auth) }})\n            const userMiddlewareOrRoute = args[0];\n            return async (...args)=>{\n                return handleAuth(args, config, userMiddlewareOrRoute).then((res)=>{\n                    return res;\n                });\n            };\n        }\n        // API Routes, getServerSideProps\n        const request = \"req\" in args[0] ? args[0].req : args[0];\n        const response = \"res\" in args[0] ? args[0].res : args[1];\n        return getSession(// @ts-expect-error\n        new Headers(request.headers), config).then(async (authResponse)=>{\n            const auth = await authResponse.json();\n            for (const cookie of authResponse.headers.getSetCookie())if (\"headers\" in response) response.headers.append(\"set-cookie\", cookie);\n            else response.appendHeader(\"set-cookie\", cookie);\n            return auth;\n        });\n    };\n}\nasync function handleAuth(args, config, userMiddlewareOrRoute) {\n    const request = (0,_env_js__WEBPACK_IMPORTED_MODULE_3__.reqWithEnvURL)(args[0]);\n    const sessionResponse = await getSession(request.headers, config);\n    const auth = await sessionResponse.json();\n    let authorized = true;\n    if (config.callbacks?.authorized) {\n        authorized = await config.callbacks.authorized({\n            request,\n            auth\n        });\n    }\n    let response = next_server__WEBPACK_IMPORTED_MODULE_2__.NextResponse.next?.();\n    if (authorized instanceof Response) {\n        // User returned a custom response, like redirecting to a page or 401, respect it\n        response = authorized;\n        const redirect = authorized.headers.get(\"Location\");\n        const { pathname } = request.nextUrl;\n        // If the user is redirecting to the same NextAuth.js action path as the current request,\n        // don't allow the redirect to prevent an infinite loop\n        if (redirect && isSameAuthAction(pathname, new URL(redirect).pathname, config)) {\n            authorized = true;\n        }\n    } else if (userMiddlewareOrRoute) {\n        // Execute user's middleware/handler with the augmented request\n        const augmentedReq = request;\n        augmentedReq.auth = auth;\n        response = await userMiddlewareOrRoute(augmentedReq, args[1]) ?? next_server__WEBPACK_IMPORTED_MODULE_2__.NextResponse.next();\n    } else if (!authorized) {\n        const signInPage = config.pages?.signIn ?? `${config.basePath}/signin`;\n        if (request.nextUrl.pathname !== signInPage) {\n            // Redirect to signin page by default if not authorized\n            const signInUrl = request.nextUrl.clone();\n            signInUrl.pathname = signInPage;\n            signInUrl.searchParams.set(\"callbackUrl\", request.nextUrl.href);\n            response = next_server__WEBPACK_IMPORTED_MODULE_2__.NextResponse.redirect(signInUrl);\n        }\n    }\n    const finalResponse = new Response(response?.body, response);\n    // Preserve cookies from the session response\n    for (const cookie of sessionResponse.headers.getSetCookie())finalResponse.headers.append(\"set-cookie\", cookie);\n    return finalResponse;\n}\nfunction isSameAuthAction(requestPath, redirectPath, config) {\n    const action = redirectPath.replace(`${requestPath}/`, \"\");\n    const pages = Object.values(config.pages ?? {});\n    return (actions.has(action) || pages.includes(redirectPath)) && redirectPath === requestPath;\n}\nconst actions = new Set([\n    \"providers\",\n    \"session\",\n    \"csrf\",\n    \"signin\",\n    \"signout\",\n    \"callback\",\n    \"verify-request\",\n    \"error\"\n]);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next-auth/lib/index.js\n");

/***/ }),

/***/ "./node_modules/next-auth/providers/credentials.js":
/*!*********************************************************!*\
  !*** ./node_modules/next-auth/providers/credentials.js ***!
  \*********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _auth_core_providers_credentials__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _auth_core_providers_credentials__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auth/core/providers/credentials */ \"@auth/core/providers/credentials\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_auth_core_providers_credentials__WEBPACK_IMPORTED_MODULE_0__]);\n_auth_core_providers_credentials__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _auth_core_providers_credentials__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _auth_core_providers_credentials__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC1hdXRoL3Byb3ZpZGVycy9jcmVkZW50aWFscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFpRDtBQUNVIiwic291cmNlcyI6WyIvVXNlcnMvam9zaHNuYWlsei9jb2RlL3JlYWN0L2FkbWluLWVyaWNrc29ucGxhemEvbm9kZV9tb2R1bGVzL25leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIkBhdXRoL2NvcmUvcHJvdmlkZXJzL2NyZWRlbnRpYWxzXCI7XG5leHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIkBhdXRoL2NvcmUvcHJvdmlkZXJzL2NyZWRlbnRpYWxzXCI7XG4iXSwibmFtZXMiOlsiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next-auth/providers/credentials.js\n");

/***/ }),

/***/ "./node_modules/next-auth/react.js":
/*!*****************************************!*\
  !*** ./node_modules/next-auth/react.js ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SessionContext: () => (/* binding */ SessionContext),\n/* harmony export */   SessionProvider: () => (/* binding */ SessionProvider),\n/* harmony export */   __NEXTAUTH: () => (/* binding */ __NEXTAUTH),\n/* harmony export */   getCsrfToken: () => (/* binding */ getCsrfToken),\n/* harmony export */   getProviders: () => (/* binding */ getProviders),\n/* harmony export */   getSession: () => (/* binding */ getSession),\n/* harmony export */   signIn: () => (/* binding */ signIn),\n/* harmony export */   signOut: () => (/* binding */ signOut),\n/* harmony export */   useSession: () => (/* binding */ useSession)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"react/jsx-runtime\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var _lib_client_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/client.js */ \"./node_modules/next-auth/lib/client.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_client_js__WEBPACK_IMPORTED_MODULE_2__]);\n_lib_client_js__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/**\n *\n * NextAuth.js is the official integration of Auth.js for Next.js applications. It supports both\n * [Client Components](https://nextjs.org/docs/app/building-your-application/rendering/client-components) and the\n * [Pages Router](https://nextjs.org/docs/pages). It includes methods for signing in, signing out, hooks, and a React\n * Context provider to wrap your application and make session data available anywhere.\n *\n * For use in [Server Actions](https://nextjs.org/docs/app/api-reference/functions/server-actions), check out [these methods](https://authjs.dev/guides/upgrade-to-v5#methods)\n *\n * @module react\n */ /* __next_internal_client_entry_do_not_use__ __NEXTAUTH,SessionContext,useSession,getSession,getCsrfToken,getProviders,signIn,signOut,SessionProvider auto */ \n\n\n// This behaviour mirrors the default behaviour for getting the site name that\n// happens server side in server/index.js\n// 1. An empty value is legitimate when the code is being invoked client side as\n//    relative URLs are valid in that context and so defaults to empty.\n// 2. When invoked server side the value is picked up from an environment\n//    variable and defaults to 'http://localhost:3000'.\nconst __NEXTAUTH = {\n    baseUrl: (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.parseUrl)(process.env.NEXTAUTH_URL ?? process.env.VERCEL_URL).origin,\n    basePath: (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.parseUrl)(process.env.NEXTAUTH_URL).path,\n    baseUrlServer: (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.parseUrl)(process.env.NEXTAUTH_URL_INTERNAL ?? process.env.NEXTAUTH_URL ?? process.env.VERCEL_URL).origin,\n    basePathServer: (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.parseUrl)(process.env.NEXTAUTH_URL_INTERNAL ?? process.env.NEXTAUTH_URL).path,\n    _lastSync: 0,\n    _session: undefined,\n    _getSession: ()=>{}\n};\nlet broadcastChannel = null;\nfunction getNewBroadcastChannel() {\n    return new BroadcastChannel(\"next-auth\");\n}\nfunction broadcast() {\n    if (typeof BroadcastChannel === \"undefined\") {\n        return {\n            postMessage: ()=>{},\n            addEventListener: ()=>{},\n            removeEventListener: ()=>{}\n        };\n    }\n    if (broadcastChannel === null) {\n        broadcastChannel = getNewBroadcastChannel();\n    }\n    return broadcastChannel;\n}\n// TODO:\nconst logger = {\n    debug: console.debug,\n    error: console.error,\n    warn: console.warn\n};\nconst SessionContext = react__WEBPACK_IMPORTED_MODULE_1__.createContext?.(undefined);\n/**\n * React Hook that gives you access to the logged in user's session data and lets you modify it.\n *\n * :::info\n * `useSession` is for client-side use only and when using [Next.js App Router (`app/`)](https://nextjs.org/blog/next-13-4#nextjs-app-router) you should prefer the `auth()` export.\n * :::\n */ function useSession(options) {\n    if (!SessionContext) {\n        throw new Error(\"React Context is unavailable in Server Components\");\n    }\n    // @ts-expect-error Satisfy TS if branch on line below\n    const value = react__WEBPACK_IMPORTED_MODULE_1__.useContext(SessionContext);\n    if (!value && \"development\" !== \"production\") {\n        throw new Error(\"[next-auth]: `useSession` must be wrapped in a <SessionProvider />\");\n    }\n    const { required, onUnauthenticated } = options ?? {};\n    const requiredAndNotLoading = required && value.status === \"unauthenticated\";\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useSession.useEffect\": ()=>{\n            if (requiredAndNotLoading) {\n                const url = `${__NEXTAUTH.basePath}/signin?${new URLSearchParams({\n                    error: \"SessionRequired\",\n                    callbackUrl: window.location.href\n                })}`;\n                if (onUnauthenticated) onUnauthenticated();\n                else window.location.href = url;\n            }\n        }\n    }[\"useSession.useEffect\"], [\n        requiredAndNotLoading,\n        onUnauthenticated\n    ]);\n    if (requiredAndNotLoading) {\n        return {\n            data: value.data,\n            update: value.update,\n            status: \"loading\"\n        };\n    }\n    return value;\n}\nasync function getSession(params) {\n    const session = await (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.fetchData)(\"session\", __NEXTAUTH, logger, params);\n    if (params?.broadcast ?? true) {\n        const broadcastChannel = getNewBroadcastChannel();\n        broadcastChannel.postMessage({\n            event: \"session\",\n            data: {\n                trigger: \"getSession\"\n            }\n        });\n    }\n    return session;\n}\n/**\n * Returns the current Cross-Site Request Forgery Token (CSRF Token)\n * required to make requests that changes state. (e.g. signing in or out, or updating the session).\n *\n * [CSRF Prevention: Double Submit Cookie](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie)\n */ async function getCsrfToken() {\n    const response = await (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.fetchData)(\"csrf\", __NEXTAUTH, logger);\n    return response?.csrfToken ?? \"\";\n}\n/**\n * Returns a client-safe configuration object of the currently\n * available providers.\n */ async function getProviders() {\n    return (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.fetchData)(\"providers\", __NEXTAUTH, logger);\n}\n/**\n * Initiate a signin flow or send the user to the signin page listing all possible providers.\n * Handles CSRF protection.\n */ async function signIn(provider, options, authorizationParams) {\n    const { redirect = true } = options ?? {};\n    const redirectTo = options?.redirectTo ?? options?.callbackUrl ?? window.location.href;\n    const baseUrl = (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.apiBaseUrl)(__NEXTAUTH);\n    const providers = await getProviders();\n    if (!providers) {\n        window.location.href = `${baseUrl}/error`;\n        return;\n    }\n    if (!provider || !(provider in providers)) {\n        window.location.href = `${baseUrl}/signin?${new URLSearchParams({\n            callbackUrl: redirectTo\n        })}`;\n        return;\n    }\n    const isCredentials = providers[provider].type === \"credentials\";\n    const isEmail = providers[provider].type === \"email\";\n    const isSupportingReturn = isCredentials || isEmail;\n    const signInUrl = `${baseUrl}/${isCredentials ? \"callback\" : \"signin\"}/${provider}`;\n    const csrfToken = await getCsrfToken();\n    const res = await fetch(`${signInUrl}?${new URLSearchParams(authorizationParams)}`, {\n        method: \"post\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"X-Auth-Return-Redirect\": \"1\"\n        },\n        // @ts-expect-error\n        body: new URLSearchParams({\n            ...options,\n            csrfToken,\n            callbackUrl: redirectTo\n        })\n    });\n    const data = await res.json();\n    // TODO: Do not redirect for Credentials and Email providers by default in next major\n    if (redirect || !isSupportingReturn) {\n        const url = data.url ?? redirectTo;\n        window.location.href = url;\n        // If url contains a hash, the browser does not reload the page. We reload manually\n        if (url.includes(\"#\")) window.location.reload();\n        return;\n    }\n    const error = new URL(data.url).searchParams.get(\"error\");\n    const code = new URL(data.url).searchParams.get(\"code\");\n    if (res.ok) {\n        await __NEXTAUTH._getSession({\n            event: \"storage\"\n        });\n    }\n    return {\n        error,\n        code,\n        status: res.status,\n        ok: res.ok,\n        url: error ? null : data.url\n    };\n}\n/**\n * Initiate a signout, by destroying the current session.\n * Handles CSRF protection.\n */ async function signOut(options) {\n    const redirectTo = options?.redirectTo ?? options?.callbackUrl ?? window.location.href;\n    const baseUrl = (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.apiBaseUrl)(__NEXTAUTH);\n    const csrfToken = await getCsrfToken();\n    const res = await fetch(`${baseUrl}/signout`, {\n        method: \"post\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"X-Auth-Return-Redirect\": \"1\"\n        },\n        body: new URLSearchParams({\n            csrfToken,\n            callbackUrl: redirectTo\n        })\n    });\n    const data = await res.json();\n    broadcast().postMessage({\n        event: \"session\",\n        data: {\n            trigger: \"signout\"\n        }\n    });\n    if (options?.redirect ?? true) {\n        const url = data.url ?? redirectTo;\n        window.location.href = url;\n        // If url contains a hash, the browser does not reload the page. We reload manually\n        if (url.includes(\"#\")) window.location.reload();\n        // @ts-expect-error\n        return;\n    }\n    await __NEXTAUTH._getSession({\n        event: \"storage\"\n    });\n    return data;\n}\n/**\n * [React Context](https://react.dev/learn/passing-data-deeply-with-context) provider to wrap the app (`pages/`) to make session data available anywhere.\n *\n * When used, the session state is automatically synchronized across all open tabs/windows and they are all updated whenever they gain or lose focus\n * or the state changes (e.g. a user signs in or out) when {@link SessionProviderProps.refetchOnWindowFocus} is `true`.\n *\n * :::info\n * `SessionProvider` is for client-side use only and when using [Next.js App Router (`app/`)](https://nextjs.org/blog/next-13-4#nextjs-app-router) you should prefer the `auth()` export.\n * :::\n */ function SessionProvider(props) {\n    if (!SessionContext) {\n        throw new Error(\"React Context is unavailable in Server Components\");\n    }\n    const { children, basePath, refetchInterval, refetchWhenOffline } = props;\n    if (basePath) __NEXTAUTH.basePath = basePath;\n    /**\n     * If session was `null`, there was an attempt to fetch it,\n     * but it failed, but we still treat it as a valid initial value.\n     */ const hasInitialSession = props.session !== undefined;\n    /** If session was passed, initialize as already synced */ __NEXTAUTH._lastSync = hasInitialSession ? (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.now)() : 0;\n    const [session, setSession] = react__WEBPACK_IMPORTED_MODULE_1__.useState({\n        \"SessionProvider.useState\": ()=>{\n            if (hasInitialSession) __NEXTAUTH._session = props.session;\n            return props.session;\n        }\n    }[\"SessionProvider.useState\"]);\n    /** If session was passed, initialize as not loading */ const [loading, setLoading] = react__WEBPACK_IMPORTED_MODULE_1__.useState(!hasInitialSession);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SessionProvider.useEffect\": ()=>{\n            __NEXTAUTH._getSession = ({\n                \"SessionProvider.useEffect\": async ({ event } = {})=>{\n                    try {\n                        const storageEvent = event === \"storage\";\n                        // We should always update if we don't have a client session yet\n                        // or if there are events from other tabs/windows\n                        if (storageEvent || __NEXTAUTH._session === undefined) {\n                            __NEXTAUTH._lastSync = (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.now)();\n                            __NEXTAUTH._session = await getSession({\n                                broadcast: !storageEvent\n                            });\n                            setSession(__NEXTAUTH._session);\n                            return;\n                        }\n                        if (// If there is no time defined for when a session should be considered\n                        // stale, then it's okay to use the value we have until an event is\n                        // triggered which updates it\n                        !event || // If the client doesn't have a session then we don't need to call\n                        // the server to check if it does (if they have signed in via another\n                        // tab or window that will come through as a \"stroage\" event\n                        // event anyway)\n                        __NEXTAUTH._session === null || // Bail out early if the client session is not stale yet\n                        (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.now)() < __NEXTAUTH._lastSync) {\n                            return;\n                        }\n                        // An event or session staleness occurred, update the client session.\n                        __NEXTAUTH._lastSync = (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.now)();\n                        __NEXTAUTH._session = await getSession();\n                        setSession(__NEXTAUTH._session);\n                    } catch (error) {\n                        logger.error(new _lib_client_js__WEBPACK_IMPORTED_MODULE_2__.ClientSessionError(error.message, error));\n                    } finally{\n                        setLoading(false);\n                    }\n                }\n            })[\"SessionProvider.useEffect\"];\n            __NEXTAUTH._getSession();\n            return ({\n                \"SessionProvider.useEffect\": ()=>{\n                    __NEXTAUTH._lastSync = 0;\n                    __NEXTAUTH._session = undefined;\n                    __NEXTAUTH._getSession = ({\n                        \"SessionProvider.useEffect\": ()=>{}\n                    })[\"SessionProvider.useEffect\"];\n                }\n            })[\"SessionProvider.useEffect\"];\n        }\n    }[\"SessionProvider.useEffect\"], []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SessionProvider.useEffect\": ()=>{\n            const handle = {\n                \"SessionProvider.useEffect.handle\": ()=>__NEXTAUTH._getSession({\n                        event: \"storage\"\n                    })\n            }[\"SessionProvider.useEffect.handle\"];\n            // Listen for storage events and update session if event fired from\n            // another window (but suppress firing another event to avoid a loop)\n            // Fetch new session data but tell it to not to fire another event to\n            // avoid an infinite loop.\n            // Note: We could pass session data through and do something like\n            // `setData(message.data)` but that can cause problems depending\n            // on how the session object is being used in the client; it is\n            // more robust to have each window/tab fetch it's own copy of the\n            // session object rather than share it across instances.\n            broadcast().addEventListener(\"message\", handle);\n            return ({\n                \"SessionProvider.useEffect\": ()=>broadcast().removeEventListener(\"message\", handle)\n            })[\"SessionProvider.useEffect\"];\n        }\n    }[\"SessionProvider.useEffect\"], []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SessionProvider.useEffect\": ()=>{\n            const { refetchOnWindowFocus = true } = props;\n            // Listen for when the page is visible, if the user switches tabs\n            // and makes our tab visible again, re-fetch the session, but only if\n            // this feature is not disabled.\n            const visibilityHandler = {\n                \"SessionProvider.useEffect.visibilityHandler\": ()=>{\n                    if (refetchOnWindowFocus && document.visibilityState === \"visible\") __NEXTAUTH._getSession({\n                        event: \"visibilitychange\"\n                    });\n                }\n            }[\"SessionProvider.useEffect.visibilityHandler\"];\n            document.addEventListener(\"visibilitychange\", visibilityHandler, false);\n            return ({\n                \"SessionProvider.useEffect\": ()=>document.removeEventListener(\"visibilitychange\", visibilityHandler, false)\n            })[\"SessionProvider.useEffect\"];\n        }\n    }[\"SessionProvider.useEffect\"], [\n        props.refetchOnWindowFocus\n    ]);\n    const isOnline = (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.useOnline)();\n    // TODO: Flip this behavior in next major version\n    const shouldRefetch = refetchWhenOffline !== false || isOnline;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SessionProvider.useEffect\": ()=>{\n            if (refetchInterval && shouldRefetch) {\n                const refetchIntervalTimer = setInterval({\n                    \"SessionProvider.useEffect.refetchIntervalTimer\": ()=>{\n                        if (__NEXTAUTH._session) {\n                            __NEXTAUTH._getSession({\n                                event: \"poll\"\n                            });\n                        }\n                    }\n                }[\"SessionProvider.useEffect.refetchIntervalTimer\"], refetchInterval * 1000);\n                return ({\n                    \"SessionProvider.useEffect\": ()=>clearInterval(refetchIntervalTimer)\n                })[\"SessionProvider.useEffect\"];\n            }\n        }\n    }[\"SessionProvider.useEffect\"], [\n        refetchInterval,\n        shouldRefetch\n    ]);\n    const value = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"SessionProvider.useMemo[value]\": ()=>({\n                data: session,\n                status: loading ? \"loading\" : session ? \"authenticated\" : \"unauthenticated\",\n                async update (data) {\n                    if (loading) return;\n                    setLoading(true);\n                    const newSession = await (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.fetchData)(\"session\", __NEXTAUTH, logger, typeof data === \"undefined\" ? undefined : {\n                        body: {\n                            csrfToken: await getCsrfToken(),\n                            data\n                        }\n                    });\n                    setLoading(false);\n                    if (newSession) {\n                        setSession(newSession);\n                        broadcast().postMessage({\n                            event: \"session\",\n                            data: {\n                                trigger: \"getSession\"\n                            }\n                        });\n                    }\n                    return newSession;\n                }\n            })\n    }[\"SessionProvider.useMemo[value]\"], [\n        session,\n        loading\n    ]);\n    return(// @ts-expect-error\n    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SessionContext.Provider, {\n        value: value,\n        children: children\n    }));\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMxQixpREFBaUQ7SUFDakQsTUFBTXFHLGdCQUFnQmQsdUJBQXVCLFNBQVNhO0lBQ3REMUcsNENBQWU7cUNBQUM7WUFDWixJQUFJNEYsbUJBQW1CZSxlQUFlO2dCQUNsQyxNQUFNQyx1QkFBdUJDO3NFQUFZO3dCQUNyQyxJQUFJdEcsV0FBV2EsUUFBUSxFQUFFOzRCQUNyQmIsV0FBV2UsV0FBVyxDQUFDO2dDQUFFb0MsT0FBTzs0QkFBTzt3QkFDM0M7b0JBQ0o7cUVBQUdrQyxrQkFBa0I7Z0JBQ3JCO2lEQUFPLElBQU1rQixjQUFjRjs7WUFDL0I7UUFDSjtvQ0FBRztRQUFDaEI7UUFBaUJlO0tBQWM7SUFDbkMsTUFBTW5FLFFBQVF4QywwQ0FBYTswQ0FBQyxJQUFPO2dCQUMvQnFELE1BQU1JO2dCQUNOWixRQUFRb0QsVUFDRixZQUNBeEMsVUFDSSxrQkFDQTtnQkFDVixNQUFNSCxRQUFPRCxJQUFJO29CQUNiLElBQUk0QyxTQUNBO29CQUNKQyxXQUFXO29CQUNYLE1BQU1jLGFBQWEsTUFBTTdHLHlEQUFTQSxDQUFDLFdBQVdJLFlBQVl1QixRQUFRLE9BQU91QixTQUFTLGNBQzVFaEMsWUFDQTt3QkFBRTBELE1BQU07NEJBQUVqQixXQUFXLE1BQU1GOzRCQUFnQlA7d0JBQUs7b0JBQUU7b0JBQ3hENkMsV0FBVztvQkFDWCxJQUFJYyxZQUFZO3dCQUNaakIsV0FBV2lCO3dCQUNYdEYsWUFBWUMsV0FBVyxDQUFDOzRCQUNwQitCLE9BQU87NEJBQ1BMLE1BQU07Z0NBQUVNLFNBQVM7NEJBQWE7d0JBQ2xDO29CQUNKO29CQUNBLE9BQU9xRDtnQkFDWDtZQUNKO3lDQUFJO1FBQUN2RDtRQUFTd0M7S0FBUTtJQUN0QixPQUNBLG1CQUFtQjtJQUNuQmxHLHNEQUFJQSxDQUFDb0MsZUFBZThFLFFBQVEsRUFBRTtRQUFFekUsT0FBT0E7UUFBT21ELFVBQVVBO0lBQVM7QUFDckUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb3Noc25haWx6L2NvZGUvcmVhY3QvYWRtaW4tZXJpY2tzb25wbGF6YS9ub2RlX21vZHVsZXMvbmV4dC1hdXRoL3JlYWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIE5leHRBdXRoLmpzIGlzIHRoZSBvZmZpY2lhbCBpbnRlZ3JhdGlvbiBvZiBBdXRoLmpzIGZvciBOZXh0LmpzIGFwcGxpY2F0aW9ucy4gSXQgc3VwcG9ydHMgYm90aFxuICogW0NsaWVudCBDb21wb25lbnRzXShodHRwczovL25leHRqcy5vcmcvZG9jcy9hcHAvYnVpbGRpbmcteW91ci1hcHBsaWNhdGlvbi9yZW5kZXJpbmcvY2xpZW50LWNvbXBvbmVudHMpIGFuZCB0aGVcbiAqIFtQYWdlcyBSb3V0ZXJdKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL3BhZ2VzKS4gSXQgaW5jbHVkZXMgbWV0aG9kcyBmb3Igc2lnbmluZyBpbiwgc2lnbmluZyBvdXQsIGhvb2tzLCBhbmQgYSBSZWFjdFxuICogQ29udGV4dCBwcm92aWRlciB0byB3cmFwIHlvdXIgYXBwbGljYXRpb24gYW5kIG1ha2Ugc2Vzc2lvbiBkYXRhIGF2YWlsYWJsZSBhbnl3aGVyZS5cbiAqXG4gKiBGb3IgdXNlIGluIFtTZXJ2ZXIgQWN0aW9uc10oaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvZnVuY3Rpb25zL3NlcnZlci1hY3Rpb25zKSwgY2hlY2sgb3V0IFt0aGVzZSBtZXRob2RzXShodHRwczovL2F1dGhqcy5kZXYvZ3VpZGVzL3VwZ3JhZGUtdG8tdjUjbWV0aG9kcylcbiAqXG4gKiBAbW9kdWxlIHJlYWN0XG4gKi9cblwidXNlIGNsaWVudFwiO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgYXBpQmFzZVVybCwgQ2xpZW50U2Vzc2lvbkVycm9yLCBmZXRjaERhdGEsIG5vdywgcGFyc2VVcmwsIHVzZU9ubGluZSwgfSBmcm9tIFwiLi9saWIvY2xpZW50LmpzXCI7XG4vLyBUaGlzIGJlaGF2aW91ciBtaXJyb3JzIHRoZSBkZWZhdWx0IGJlaGF2aW91ciBmb3IgZ2V0dGluZyB0aGUgc2l0ZSBuYW1lIHRoYXRcbi8vIGhhcHBlbnMgc2VydmVyIHNpZGUgaW4gc2VydmVyL2luZGV4LmpzXG4vLyAxLiBBbiBlbXB0eSB2YWx1ZSBpcyBsZWdpdGltYXRlIHdoZW4gdGhlIGNvZGUgaXMgYmVpbmcgaW52b2tlZCBjbGllbnQgc2lkZSBhc1xuLy8gICAgcmVsYXRpdmUgVVJMcyBhcmUgdmFsaWQgaW4gdGhhdCBjb250ZXh0IGFuZCBzbyBkZWZhdWx0cyB0byBlbXB0eS5cbi8vIDIuIFdoZW4gaW52b2tlZCBzZXJ2ZXIgc2lkZSB0aGUgdmFsdWUgaXMgcGlja2VkIHVwIGZyb20gYW4gZW52aXJvbm1lbnRcbi8vICAgIHZhcmlhYmxlIGFuZCBkZWZhdWx0cyB0byAnaHR0cDovL2xvY2FsaG9zdDozMDAwJy5cbmV4cG9ydCBjb25zdCBfX05FWFRBVVRIID0ge1xuICAgIGJhc2VVcmw6IHBhcnNlVXJsKHByb2Nlc3MuZW52Lk5FWFRBVVRIX1VSTCA/PyBwcm9jZXNzLmVudi5WRVJDRUxfVVJMKS5vcmlnaW4sXG4gICAgYmFzZVBhdGg6IHBhcnNlVXJsKHByb2Nlc3MuZW52Lk5FWFRBVVRIX1VSTCkucGF0aCxcbiAgICBiYXNlVXJsU2VydmVyOiBwYXJzZVVybChwcm9jZXNzLmVudi5ORVhUQVVUSF9VUkxfSU5URVJOQUwgPz9cbiAgICAgICAgcHJvY2Vzcy5lbnYuTkVYVEFVVEhfVVJMID8/XG4gICAgICAgIHByb2Nlc3MuZW52LlZFUkNFTF9VUkwpLm9yaWdpbixcbiAgICBiYXNlUGF0aFNlcnZlcjogcGFyc2VVcmwocHJvY2Vzcy5lbnYuTkVYVEFVVEhfVVJMX0lOVEVSTkFMID8/IHByb2Nlc3MuZW52Lk5FWFRBVVRIX1VSTCkucGF0aCxcbiAgICBfbGFzdFN5bmM6IDAsXG4gICAgX3Nlc3Npb246IHVuZGVmaW5lZCxcbiAgICBfZ2V0U2Vzc2lvbjogKCkgPT4geyB9LFxufTtcbmxldCBicm9hZGNhc3RDaGFubmVsID0gbnVsbDtcbmZ1bmN0aW9uIGdldE5ld0Jyb2FkY2FzdENoYW5uZWwoKSB7XG4gICAgcmV0dXJuIG5ldyBCcm9hZGNhc3RDaGFubmVsKFwibmV4dC1hdXRoXCIpO1xufVxuZnVuY3Rpb24gYnJvYWRjYXN0KCkge1xuICAgIGlmICh0eXBlb2YgQnJvYWRjYXN0Q2hhbm5lbCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9zdE1lc3NhZ2U6ICgpID0+IHsgfSxcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6ICgpID0+IHsgfSxcbiAgICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6ICgpID0+IHsgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGJyb2FkY2FzdENoYW5uZWwgPT09IG51bGwpIHtcbiAgICAgICAgYnJvYWRjYXN0Q2hhbm5lbCA9IGdldE5ld0Jyb2FkY2FzdENoYW5uZWwoKTtcbiAgICB9XG4gICAgcmV0dXJuIGJyb2FkY2FzdENoYW5uZWw7XG59XG4vLyBUT0RPOlxuY29uc3QgbG9nZ2VyID0ge1xuICAgIGRlYnVnOiBjb25zb2xlLmRlYnVnLFxuICAgIGVycm9yOiBjb25zb2xlLmVycm9yLFxuICAgIHdhcm46IGNvbnNvbGUud2Fybixcbn07XG5leHBvcnQgY29uc3QgU2Vzc2lvbkNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0Py4odW5kZWZpbmVkKTtcbi8qKlxuICogUmVhY3QgSG9vayB0aGF0IGdpdmVzIHlvdSBhY2Nlc3MgdG8gdGhlIGxvZ2dlZCBpbiB1c2VyJ3Mgc2Vzc2lvbiBkYXRhIGFuZCBsZXRzIHlvdSBtb2RpZnkgaXQuXG4gKlxuICogOjo6aW5mb1xuICogYHVzZVNlc3Npb25gIGlzIGZvciBjbGllbnQtc2lkZSB1c2Ugb25seSBhbmQgd2hlbiB1c2luZyBbTmV4dC5qcyBBcHAgUm91dGVyIChgYXBwL2ApXShodHRwczovL25leHRqcy5vcmcvYmxvZy9uZXh0LTEzLTQjbmV4dGpzLWFwcC1yb3V0ZXIpIHlvdSBzaG91bGQgcHJlZmVyIHRoZSBgYXV0aCgpYCBleHBvcnQuXG4gKiA6OjpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlc3Npb24ob3B0aW9ucykge1xuICAgIGlmICghU2Vzc2lvbkNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVhY3QgQ29udGV4dCBpcyB1bmF2YWlsYWJsZSBpbiBTZXJ2ZXIgQ29tcG9uZW50c1wiKTtcbiAgICB9XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBTYXRpc2Z5IFRTIGlmIGJyYW5jaCBvbiBsaW5lIGJlbG93XG4gICAgY29uc3QgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KFNlc3Npb25Db250ZXh0KTtcbiAgICBpZiAoIXZhbHVlICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbbmV4dC1hdXRoXTogYHVzZVNlc3Npb25gIG11c3QgYmUgd3JhcHBlZCBpbiBhIDxTZXNzaW9uUHJvdmlkZXIgLz5cIik7XG4gICAgfVxuICAgIGNvbnN0IHsgcmVxdWlyZWQsIG9uVW5hdXRoZW50aWNhdGVkIH0gPSBvcHRpb25zID8/IHt9O1xuICAgIGNvbnN0IHJlcXVpcmVkQW5kTm90TG9hZGluZyA9IHJlcXVpcmVkICYmIHZhbHVlLnN0YXR1cyA9PT0gXCJ1bmF1dGhlbnRpY2F0ZWRcIjtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAocmVxdWlyZWRBbmROb3RMb2FkaW5nKSB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBgJHtfX05FWFRBVVRILmJhc2VQYXRofS9zaWduaW4/JHtuZXcgVVJMU2VhcmNoUGFyYW1zKHtcbiAgICAgICAgICAgICAgICBlcnJvcjogXCJTZXNzaW9uUmVxdWlyZWRcIixcbiAgICAgICAgICAgICAgICBjYWxsYmFja1VybDogd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgICAgICAgICB9KX1gO1xuICAgICAgICAgICAgaWYgKG9uVW5hdXRoZW50aWNhdGVkKVxuICAgICAgICAgICAgICAgIG9uVW5hdXRoZW50aWNhdGVkKCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgIH1cbiAgICB9LCBbcmVxdWlyZWRBbmROb3RMb2FkaW5nLCBvblVuYXV0aGVudGljYXRlZF0pO1xuICAgIGlmIChyZXF1aXJlZEFuZE5vdExvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHZhbHVlLmRhdGEsXG4gICAgICAgICAgICB1cGRhdGU6IHZhbHVlLnVwZGF0ZSxcbiAgICAgICAgICAgIHN0YXR1czogXCJsb2FkaW5nXCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTZXNzaW9uKHBhcmFtcykge1xuICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBmZXRjaERhdGEoXCJzZXNzaW9uXCIsIF9fTkVYVEFVVEgsIGxvZ2dlciwgcGFyYW1zKTtcbiAgICBpZiAocGFyYW1zPy5icm9hZGNhc3QgPz8gdHJ1ZSkge1xuICAgICAgICBjb25zdCBicm9hZGNhc3RDaGFubmVsID0gZ2V0TmV3QnJvYWRjYXN0Q2hhbm5lbCgpO1xuICAgICAgICBicm9hZGNhc3RDaGFubmVsLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIGV2ZW50OiBcInNlc3Npb25cIixcbiAgICAgICAgICAgIGRhdGE6IHsgdHJpZ2dlcjogXCJnZXRTZXNzaW9uXCIgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBzZXNzaW9uO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IENyb3NzLVNpdGUgUmVxdWVzdCBGb3JnZXJ5IFRva2VuIChDU1JGIFRva2VuKVxuICogcmVxdWlyZWQgdG8gbWFrZSByZXF1ZXN0cyB0aGF0IGNoYW5nZXMgc3RhdGUuIChlLmcuIHNpZ25pbmcgaW4gb3Igb3V0LCBvciB1cGRhdGluZyB0aGUgc2Vzc2lvbikuXG4gKlxuICogW0NTUkYgUHJldmVudGlvbjogRG91YmxlIFN1Ym1pdCBDb29raWVdKGh0dHBzOi8vY2hlYXRzaGVldHNlcmllcy5vd2FzcC5vcmcvY2hlYXRzaGVldHMvQ3Jvc3MtU2l0ZV9SZXF1ZXN0X0ZvcmdlcnlfUHJldmVudGlvbl9DaGVhdF9TaGVldC5odG1sI2RvdWJsZS1zdWJtaXQtY29va2llKVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q3NyZlRva2VuKCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2hEYXRhKFwiY3NyZlwiLCBfX05FWFRBVVRILCBsb2dnZXIpO1xuICAgIHJldHVybiByZXNwb25zZT8uY3NyZlRva2VuID8/IFwiXCI7XG59XG4vKipcbiAqIFJldHVybnMgYSBjbGllbnQtc2FmZSBjb25maWd1cmF0aW9uIG9iamVjdCBvZiB0aGUgY3VycmVudGx5XG4gKiBhdmFpbGFibGUgcHJvdmlkZXJzLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UHJvdmlkZXJzKCkge1xuICAgIHJldHVybiBmZXRjaERhdGEoXCJwcm92aWRlcnNcIiwgX19ORVhUQVVUSCwgbG9nZ2VyKTtcbn1cbi8qKlxuICogSW5pdGlhdGUgYSBzaWduaW4gZmxvdyBvciBzZW5kIHRoZSB1c2VyIHRvIHRoZSBzaWduaW4gcGFnZSBsaXN0aW5nIGFsbCBwb3NzaWJsZSBwcm92aWRlcnMuXG4gKiBIYW5kbGVzIENTUkYgcHJvdGVjdGlvbi5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25Jbihwcm92aWRlciwgb3B0aW9ucywgYXV0aG9yaXphdGlvblBhcmFtcykge1xuICAgIGNvbnN0IHsgcmVkaXJlY3QgPSB0cnVlIH0gPSBvcHRpb25zID8/IHt9O1xuICAgIGNvbnN0IHJlZGlyZWN0VG8gPSBvcHRpb25zPy5yZWRpcmVjdFRvID8/IG9wdGlvbnM/LmNhbGxiYWNrVXJsID8/IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIGNvbnN0IGJhc2VVcmwgPSBhcGlCYXNlVXJsKF9fTkVYVEFVVEgpO1xuICAgIGNvbnN0IHByb3ZpZGVycyA9IGF3YWl0IGdldFByb3ZpZGVycygpO1xuICAgIGlmICghcHJvdmlkZXJzKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYCR7YmFzZVVybH0vZXJyb3JgO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghcHJvdmlkZXIgfHwgIShwcm92aWRlciBpbiBwcm92aWRlcnMpKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYCR7YmFzZVVybH0vc2lnbmluPyR7bmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgICAgICAgICBjYWxsYmFja1VybDogcmVkaXJlY3RUbyxcbiAgICAgICAgfSl9YDtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpc0NyZWRlbnRpYWxzID0gcHJvdmlkZXJzW3Byb3ZpZGVyXS50eXBlID09PSBcImNyZWRlbnRpYWxzXCI7XG4gICAgY29uc3QgaXNFbWFpbCA9IHByb3ZpZGVyc1twcm92aWRlcl0udHlwZSA9PT0gXCJlbWFpbFwiO1xuICAgIGNvbnN0IGlzU3VwcG9ydGluZ1JldHVybiA9IGlzQ3JlZGVudGlhbHMgfHwgaXNFbWFpbDtcbiAgICBjb25zdCBzaWduSW5VcmwgPSBgJHtiYXNlVXJsfS8ke2lzQ3JlZGVudGlhbHMgPyBcImNhbGxiYWNrXCIgOiBcInNpZ25pblwifS8ke3Byb3ZpZGVyfWA7XG4gICAgY29uc3QgY3NyZlRva2VuID0gYXdhaXQgZ2V0Q3NyZlRva2VuKCk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7c2lnbkluVXJsfT8ke25ldyBVUkxTZWFyY2hQYXJhbXMoYXV0aG9yaXphdGlvblBhcmFtcyl9YCwge1xuICAgICAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuICAgICAgICAgICAgXCJYLUF1dGgtUmV0dXJuLVJlZGlyZWN0XCI6IFwiMVwiLFxuICAgICAgICB9LFxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgIGJvZHk6IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGNzcmZUb2tlbixcbiAgICAgICAgICAgIGNhbGxiYWNrVXJsOiByZWRpcmVjdFRvLFxuICAgICAgICB9KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAvLyBUT0RPOiBEbyBub3QgcmVkaXJlY3QgZm9yIENyZWRlbnRpYWxzIGFuZCBFbWFpbCBwcm92aWRlcnMgYnkgZGVmYXVsdCBpbiBuZXh0IG1ham9yXG4gICAgaWYgKHJlZGlyZWN0IHx8ICFpc1N1cHBvcnRpbmdSZXR1cm4pIHtcbiAgICAgICAgY29uc3QgdXJsID0gZGF0YS51cmwgPz8gcmVkaXJlY3RUbztcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgIC8vIElmIHVybCBjb250YWlucyBhIGhhc2gsIHRoZSBicm93c2VyIGRvZXMgbm90IHJlbG9hZCB0aGUgcGFnZS4gV2UgcmVsb2FkIG1hbnVhbGx5XG4gICAgICAgIGlmICh1cmwuaW5jbHVkZXMoXCIjXCIpKVxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGVycm9yID0gbmV3IFVSTChkYXRhLnVybCkuc2VhcmNoUGFyYW1zLmdldChcImVycm9yXCIpO1xuICAgIGNvbnN0IGNvZGUgPSBuZXcgVVJMKGRhdGEudXJsKS5zZWFyY2hQYXJhbXMuZ2V0KFwiY29kZVwiKTtcbiAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgIGF3YWl0IF9fTkVYVEFVVEguX2dldFNlc3Npb24oeyBldmVudDogXCJzdG9yYWdlXCIgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yLFxuICAgICAgICBjb2RlLFxuICAgICAgICBzdGF0dXM6IHJlcy5zdGF0dXMsXG4gICAgICAgIG9rOiByZXMub2ssXG4gICAgICAgIHVybDogZXJyb3IgPyBudWxsIDogZGF0YS51cmwsXG4gICAgfTtcbn1cbi8qKlxuICogSW5pdGlhdGUgYSBzaWdub3V0LCBieSBkZXN0cm95aW5nIHRoZSBjdXJyZW50IHNlc3Npb24uXG4gKiBIYW5kbGVzIENTUkYgcHJvdGVjdGlvbi5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25PdXQob3B0aW9ucykge1xuICAgIGNvbnN0IHJlZGlyZWN0VG8gPSBvcHRpb25zPy5yZWRpcmVjdFRvID8/IG9wdGlvbnM/LmNhbGxiYWNrVXJsID8/IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIGNvbnN0IGJhc2VVcmwgPSBhcGlCYXNlVXJsKF9fTkVYVEFVVEgpO1xuICAgIGNvbnN0IGNzcmZUb2tlbiA9IGF3YWl0IGdldENzcmZUb2tlbigpO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke2Jhc2VVcmx9L3NpZ25vdXRgLCB7XG4gICAgICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICAgICAgICBcIlgtQXV0aC1SZXR1cm4tUmVkaXJlY3RcIjogXCIxXCIsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IG5ldyBVUkxTZWFyY2hQYXJhbXMoeyBjc3JmVG9rZW4sIGNhbGxiYWNrVXJsOiByZWRpcmVjdFRvIH0pLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICAgIGJyb2FkY2FzdCgpLnBvc3RNZXNzYWdlKHsgZXZlbnQ6IFwic2Vzc2lvblwiLCBkYXRhOiB7IHRyaWdnZXI6IFwic2lnbm91dFwiIH0gfSk7XG4gICAgaWYgKG9wdGlvbnM/LnJlZGlyZWN0ID8/IHRydWUpIHtcbiAgICAgICAgY29uc3QgdXJsID0gZGF0YS51cmwgPz8gcmVkaXJlY3RUbztcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgIC8vIElmIHVybCBjb250YWlucyBhIGhhc2gsIHRoZSBicm93c2VyIGRvZXMgbm90IHJlbG9hZCB0aGUgcGFnZS4gV2UgcmVsb2FkIG1hbnVhbGx5XG4gICAgICAgIGlmICh1cmwuaW5jbHVkZXMoXCIjXCIpKVxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXQgX19ORVhUQVVUSC5fZ2V0U2Vzc2lvbih7IGV2ZW50OiBcInN0b3JhZ2VcIiB9KTtcbiAgICByZXR1cm4gZGF0YTtcbn1cbi8qKlxuICogW1JlYWN0IENvbnRleHRdKGh0dHBzOi8vcmVhY3QuZGV2L2xlYXJuL3Bhc3NpbmctZGF0YS1kZWVwbHktd2l0aC1jb250ZXh0KSBwcm92aWRlciB0byB3cmFwIHRoZSBhcHAgKGBwYWdlcy9gKSB0byBtYWtlIHNlc3Npb24gZGF0YSBhdmFpbGFibGUgYW55d2hlcmUuXG4gKlxuICogV2hlbiB1c2VkLCB0aGUgc2Vzc2lvbiBzdGF0ZSBpcyBhdXRvbWF0aWNhbGx5IHN5bmNocm9uaXplZCBhY3Jvc3MgYWxsIG9wZW4gdGFicy93aW5kb3dzIGFuZCB0aGV5IGFyZSBhbGwgdXBkYXRlZCB3aGVuZXZlciB0aGV5IGdhaW4gb3IgbG9zZSBmb2N1c1xuICogb3IgdGhlIHN0YXRlIGNoYW5nZXMgKGUuZy4gYSB1c2VyIHNpZ25zIGluIG9yIG91dCkgd2hlbiB7QGxpbmsgU2Vzc2lvblByb3ZpZGVyUHJvcHMucmVmZXRjaE9uV2luZG93Rm9jdXN9IGlzIGB0cnVlYC5cbiAqXG4gKiA6OjppbmZvXG4gKiBgU2Vzc2lvblByb3ZpZGVyYCBpcyBmb3IgY2xpZW50LXNpZGUgdXNlIG9ubHkgYW5kIHdoZW4gdXNpbmcgW05leHQuanMgQXBwIFJvdXRlciAoYGFwcC9gKV0oaHR0cHM6Ly9uZXh0anMub3JnL2Jsb2cvbmV4dC0xMy00I25leHRqcy1hcHAtcm91dGVyKSB5b3Ugc2hvdWxkIHByZWZlciB0aGUgYGF1dGgoKWAgZXhwb3J0LlxuICogOjo6XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBTZXNzaW9uUHJvdmlkZXIocHJvcHMpIHtcbiAgICBpZiAoIVNlc3Npb25Db250ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlYWN0IENvbnRleHQgaXMgdW5hdmFpbGFibGUgaW4gU2VydmVyIENvbXBvbmVudHNcIik7XG4gICAgfVxuICAgIGNvbnN0IHsgY2hpbGRyZW4sIGJhc2VQYXRoLCByZWZldGNoSW50ZXJ2YWwsIHJlZmV0Y2hXaGVuT2ZmbGluZSB9ID0gcHJvcHM7XG4gICAgaWYgKGJhc2VQYXRoKVxuICAgICAgICBfX05FWFRBVVRILmJhc2VQYXRoID0gYmFzZVBhdGg7XG4gICAgLyoqXG4gICAgICogSWYgc2Vzc2lvbiB3YXMgYG51bGxgLCB0aGVyZSB3YXMgYW4gYXR0ZW1wdCB0byBmZXRjaCBpdCxcbiAgICAgKiBidXQgaXQgZmFpbGVkLCBidXQgd2Ugc3RpbGwgdHJlYXQgaXQgYXMgYSB2YWxpZCBpbml0aWFsIHZhbHVlLlxuICAgICAqL1xuICAgIGNvbnN0IGhhc0luaXRpYWxTZXNzaW9uID0gcHJvcHMuc2Vzc2lvbiAhPT0gdW5kZWZpbmVkO1xuICAgIC8qKiBJZiBzZXNzaW9uIHdhcyBwYXNzZWQsIGluaXRpYWxpemUgYXMgYWxyZWFkeSBzeW5jZWQgKi9cbiAgICBfX05FWFRBVVRILl9sYXN0U3luYyA9IGhhc0luaXRpYWxTZXNzaW9uID8gbm93KCkgOiAwO1xuICAgIGNvbnN0IFtzZXNzaW9uLCBzZXRTZXNzaW9uXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IHtcbiAgICAgICAgaWYgKGhhc0luaXRpYWxTZXNzaW9uKVxuICAgICAgICAgICAgX19ORVhUQVVUSC5fc2Vzc2lvbiA9IHByb3BzLnNlc3Npb247XG4gICAgICAgIHJldHVybiBwcm9wcy5zZXNzaW9uO1xuICAgIH0pO1xuICAgIC8qKiBJZiBzZXNzaW9uIHdhcyBwYXNzZWQsIGluaXRpYWxpemUgYXMgbm90IGxvYWRpbmcgKi9cbiAgICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSBSZWFjdC51c2VTdGF0ZSghaGFzSW5pdGlhbFNlc3Npb24pO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIF9fTkVYVEFVVEguX2dldFNlc3Npb24gPSBhc3luYyAoeyBldmVudCB9ID0ge30pID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcmFnZUV2ZW50ID0gZXZlbnQgPT09IFwic3RvcmFnZVwiO1xuICAgICAgICAgICAgICAgIC8vIFdlIHNob3VsZCBhbHdheXMgdXBkYXRlIGlmIHdlIGRvbid0IGhhdmUgYSBjbGllbnQgc2Vzc2lvbiB5ZXRcbiAgICAgICAgICAgICAgICAvLyBvciBpZiB0aGVyZSBhcmUgZXZlbnRzIGZyb20gb3RoZXIgdGFicy93aW5kb3dzXG4gICAgICAgICAgICAgICAgaWYgKHN0b3JhZ2VFdmVudCB8fCBfX05FWFRBVVRILl9zZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX19ORVhUQVVUSC5fbGFzdFN5bmMgPSBub3coKTtcbiAgICAgICAgICAgICAgICAgICAgX19ORVhUQVVUSC5fc2Vzc2lvbiA9IGF3YWl0IGdldFNlc3Npb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJvYWRjYXN0OiAhc3RvcmFnZUV2ZW50LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc2V0U2Vzc2lvbihfX05FWFRBVVRILl9zZXNzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gdGltZSBkZWZpbmVkIGZvciB3aGVuIGEgc2Vzc2lvbiBzaG91bGQgYmUgY29uc2lkZXJlZFxuICAgICAgICAgICAgICAgIC8vIHN0YWxlLCB0aGVuIGl0J3Mgb2theSB0byB1c2UgdGhlIHZhbHVlIHdlIGhhdmUgdW50aWwgYW4gZXZlbnQgaXNcbiAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyZWQgd2hpY2ggdXBkYXRlcyBpdFxuICAgICAgICAgICAgICAgICFldmVudCB8fFxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgY2xpZW50IGRvZXNuJ3QgaGF2ZSBhIHNlc3Npb24gdGhlbiB3ZSBkb24ndCBuZWVkIHRvIGNhbGxcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHNlcnZlciB0byBjaGVjayBpZiBpdCBkb2VzIChpZiB0aGV5IGhhdmUgc2lnbmVkIGluIHZpYSBhbm90aGVyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRhYiBvciB3aW5kb3cgdGhhdCB3aWxsIGNvbWUgdGhyb3VnaCBhcyBhIFwic3Ryb2FnZVwiIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50IGFueXdheSlcbiAgICAgICAgICAgICAgICAgICAgX19ORVhUQVVUSC5fc2Vzc2lvbiA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICAvLyBCYWlsIG91dCBlYXJseSBpZiB0aGUgY2xpZW50IHNlc3Npb24gaXMgbm90IHN0YWxlIHlldFxuICAgICAgICAgICAgICAgICAgICBub3coKSA8IF9fTkVYVEFVVEguX2xhc3RTeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQW4gZXZlbnQgb3Igc2Vzc2lvbiBzdGFsZW5lc3Mgb2NjdXJyZWQsIHVwZGF0ZSB0aGUgY2xpZW50IHNlc3Npb24uXG4gICAgICAgICAgICAgICAgX19ORVhUQVVUSC5fbGFzdFN5bmMgPSBub3coKTtcbiAgICAgICAgICAgICAgICBfX05FWFRBVVRILl9zZXNzaW9uID0gYXdhaXQgZ2V0U2Vzc2lvbigpO1xuICAgICAgICAgICAgICAgIHNldFNlc3Npb24oX19ORVhUQVVUSC5fc2Vzc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IobmV3IENsaWVudFNlc3Npb25FcnJvcihlcnJvci5tZXNzYWdlLCBlcnJvcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF9fTkVYVEFVVEguX2dldFNlc3Npb24oKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIF9fTkVYVEFVVEguX2xhc3RTeW5jID0gMDtcbiAgICAgICAgICAgIF9fTkVYVEFVVEguX3Nlc3Npb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBfX05FWFRBVVRILl9nZXRTZXNzaW9uID0gKCkgPT4geyB9O1xuICAgICAgICB9O1xuICAgIH0sIFtdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBoYW5kbGUgPSAoKSA9PiBfX05FWFRBVVRILl9nZXRTZXNzaW9uKHsgZXZlbnQ6IFwic3RvcmFnZVwiIH0pO1xuICAgICAgICAvLyBMaXN0ZW4gZm9yIHN0b3JhZ2UgZXZlbnRzIGFuZCB1cGRhdGUgc2Vzc2lvbiBpZiBldmVudCBmaXJlZCBmcm9tXG4gICAgICAgIC8vIGFub3RoZXIgd2luZG93IChidXQgc3VwcHJlc3MgZmlyaW5nIGFub3RoZXIgZXZlbnQgdG8gYXZvaWQgYSBsb29wKVxuICAgICAgICAvLyBGZXRjaCBuZXcgc2Vzc2lvbiBkYXRhIGJ1dCB0ZWxsIGl0IHRvIG5vdCB0byBmaXJlIGFub3RoZXIgZXZlbnQgdG9cbiAgICAgICAgLy8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcC5cbiAgICAgICAgLy8gTm90ZTogV2UgY291bGQgcGFzcyBzZXNzaW9uIGRhdGEgdGhyb3VnaCBhbmQgZG8gc29tZXRoaW5nIGxpa2VcbiAgICAgICAgLy8gYHNldERhdGEobWVzc2FnZS5kYXRhKWAgYnV0IHRoYXQgY2FuIGNhdXNlIHByb2JsZW1zIGRlcGVuZGluZ1xuICAgICAgICAvLyBvbiBob3cgdGhlIHNlc3Npb24gb2JqZWN0IGlzIGJlaW5nIHVzZWQgaW4gdGhlIGNsaWVudDsgaXQgaXNcbiAgICAgICAgLy8gbW9yZSByb2J1c3QgdG8gaGF2ZSBlYWNoIHdpbmRvdy90YWIgZmV0Y2ggaXQncyBvd24gY29weSBvZiB0aGVcbiAgICAgICAgLy8gc2Vzc2lvbiBvYmplY3QgcmF0aGVyIHRoYW4gc2hhcmUgaXQgYWNyb3NzIGluc3RhbmNlcy5cbiAgICAgICAgYnJvYWRjYXN0KCkuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgaGFuZGxlKTtcbiAgICAgICAgcmV0dXJuICgpID0+IGJyb2FkY2FzdCgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGhhbmRsZSk7XG4gICAgfSwgW10pO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgcmVmZXRjaE9uV2luZG93Rm9jdXMgPSB0cnVlIH0gPSBwcm9wcztcbiAgICAgICAgLy8gTGlzdGVuIGZvciB3aGVuIHRoZSBwYWdlIGlzIHZpc2libGUsIGlmIHRoZSB1c2VyIHN3aXRjaGVzIHRhYnNcbiAgICAgICAgLy8gYW5kIG1ha2VzIG91ciB0YWIgdmlzaWJsZSBhZ2FpbiwgcmUtZmV0Y2ggdGhlIHNlc3Npb24sIGJ1dCBvbmx5IGlmXG4gICAgICAgIC8vIHRoaXMgZmVhdHVyZSBpcyBub3QgZGlzYWJsZWQuXG4gICAgICAgIGNvbnN0IHZpc2liaWxpdHlIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHJlZmV0Y2hPbldpbmRvd0ZvY3VzICYmIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJ2aXNpYmxlXCIpXG4gICAgICAgICAgICAgICAgX19ORVhUQVVUSC5fZ2V0U2Vzc2lvbih7IGV2ZW50OiBcInZpc2liaWxpdHljaGFuZ2VcIiB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdmlzaWJpbGl0eUhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuICgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHZpc2liaWxpdHlIYW5kbGVyLCBmYWxzZSk7XG4gICAgfSwgW3Byb3BzLnJlZmV0Y2hPbldpbmRvd0ZvY3VzXSk7XG4gICAgY29uc3QgaXNPbmxpbmUgPSB1c2VPbmxpbmUoKTtcbiAgICAvLyBUT0RPOiBGbGlwIHRoaXMgYmVoYXZpb3IgaW4gbmV4dCBtYWpvciB2ZXJzaW9uXG4gICAgY29uc3Qgc2hvdWxkUmVmZXRjaCA9IHJlZmV0Y2hXaGVuT2ZmbGluZSAhPT0gZmFsc2UgfHwgaXNPbmxpbmU7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHJlZmV0Y2hJbnRlcnZhbCAmJiBzaG91bGRSZWZldGNoKSB7XG4gICAgICAgICAgICBjb25zdCByZWZldGNoSW50ZXJ2YWxUaW1lciA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoX19ORVhUQVVUSC5fc2Vzc2lvbikge1xuICAgICAgICAgICAgICAgICAgICBfX05FWFRBVVRILl9nZXRTZXNzaW9uKHsgZXZlbnQ6IFwicG9sbFwiIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlZmV0Y2hJbnRlcnZhbCAqIDEwMDApO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwocmVmZXRjaEludGVydmFsVGltZXIpO1xuICAgICAgICB9XG4gICAgfSwgW3JlZmV0Y2hJbnRlcnZhbCwgc2hvdWxkUmVmZXRjaF0pO1xuICAgIGNvbnN0IHZhbHVlID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgICAgICBkYXRhOiBzZXNzaW9uLFxuICAgICAgICBzdGF0dXM6IGxvYWRpbmdcbiAgICAgICAgICAgID8gXCJsb2FkaW5nXCJcbiAgICAgICAgICAgIDogc2Vzc2lvblxuICAgICAgICAgICAgICAgID8gXCJhdXRoZW50aWNhdGVkXCJcbiAgICAgICAgICAgICAgICA6IFwidW5hdXRoZW50aWNhdGVkXCIsXG4gICAgICAgIGFzeW5jIHVwZGF0ZShkYXRhKSB7XG4gICAgICAgICAgICBpZiAobG9hZGluZylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzZXRMb2FkaW5nKHRydWUpO1xuICAgICAgICAgICAgY29uc3QgbmV3U2Vzc2lvbiA9IGF3YWl0IGZldGNoRGF0YShcInNlc3Npb25cIiwgX19ORVhUQVVUSCwgbG9nZ2VyLCB0eXBlb2YgZGF0YSA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgOiB7IGJvZHk6IHsgY3NyZlRva2VuOiBhd2FpdCBnZXRDc3JmVG9rZW4oKSwgZGF0YSB9IH0pO1xuICAgICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICBpZiAobmV3U2Vzc2lvbikge1xuICAgICAgICAgICAgICAgIHNldFNlc3Npb24obmV3U2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgYnJvYWRjYXN0KCkucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBldmVudDogXCJzZXNzaW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgdHJpZ2dlcjogXCJnZXRTZXNzaW9uXCIgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXdTZXNzaW9uO1xuICAgICAgICB9LFxuICAgIH0pLCBbc2Vzc2lvbiwgbG9hZGluZ10pO1xuICAgIHJldHVybiAoXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIF9qc3goU2Vzc2lvbkNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHZhbHVlLCBjaGlsZHJlbjogY2hpbGRyZW4gfSkpO1xufVxuIl0sIm5hbWVzIjpbImpzeCIsIl9qc3giLCJSZWFjdCIsImFwaUJhc2VVcmwiLCJDbGllbnRTZXNzaW9uRXJyb3IiLCJmZXRjaERhdGEiLCJub3ciLCJwYXJzZVVybCIsInVzZU9ubGluZSIsIl9fTkVYVEFVVEgiLCJiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRBVVRIX1VSTCIsIlZFUkNFTF9VUkwiLCJvcmlnaW4iLCJiYXNlUGF0aCIsInBhdGgiLCJiYXNlVXJsU2VydmVyIiwiTkVYVEFVVEhfVVJMX0lOVEVSTkFMIiwiYmFzZVBhdGhTZXJ2ZXIiLCJfbGFzdFN5bmMiLCJfc2Vzc2lvbiIsInVuZGVmaW5lZCIsIl9nZXRTZXNzaW9uIiwiYnJvYWRjYXN0Q2hhbm5lbCIsImdldE5ld0Jyb2FkY2FzdENoYW5uZWwiLCJCcm9hZGNhc3RDaGFubmVsIiwiYnJvYWRjYXN0IiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxvZ2dlciIsImRlYnVnIiwiY29uc29sZSIsImVycm9yIiwid2FybiIsIlNlc3Npb25Db250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInVzZVNlc3Npb24iLCJvcHRpb25zIiwiRXJyb3IiLCJ2YWx1ZSIsInVzZUNvbnRleHQiLCJyZXF1aXJlZCIsIm9uVW5hdXRoZW50aWNhdGVkIiwicmVxdWlyZWRBbmROb3RMb2FkaW5nIiwic3RhdHVzIiwidXNlRWZmZWN0IiwidXJsIiwiVVJMU2VhcmNoUGFyYW1zIiwiY2FsbGJhY2tVcmwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJkYXRhIiwidXBkYXRlIiwiZ2V0U2Vzc2lvbiIsInBhcmFtcyIsInNlc3Npb24iLCJldmVudCIsInRyaWdnZXIiLCJnZXRDc3JmVG9rZW4iLCJyZXNwb25zZSIsImNzcmZUb2tlbiIsImdldFByb3ZpZGVycyIsInNpZ25JbiIsInByb3ZpZGVyIiwiYXV0aG9yaXphdGlvblBhcmFtcyIsInJlZGlyZWN0IiwicmVkaXJlY3RUbyIsInByb3ZpZGVycyIsImlzQ3JlZGVudGlhbHMiLCJ0eXBlIiwiaXNFbWFpbCIsImlzU3VwcG9ydGluZ1JldHVybiIsInNpZ25JblVybCIsInJlcyIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJqc29uIiwiaW5jbHVkZXMiLCJyZWxvYWQiLCJVUkwiLCJzZWFyY2hQYXJhbXMiLCJnZXQiLCJjb2RlIiwib2siLCJzaWduT3V0IiwiU2Vzc2lvblByb3ZpZGVyIiwicHJvcHMiLCJjaGlsZHJlbiIsInJlZmV0Y2hJbnRlcnZhbCIsInJlZmV0Y2hXaGVuT2ZmbGluZSIsImhhc0luaXRpYWxTZXNzaW9uIiwic2V0U2Vzc2lvbiIsInVzZVN0YXRlIiwibG9hZGluZyIsInNldExvYWRpbmciLCJzdG9yYWdlRXZlbnQiLCJtZXNzYWdlIiwiaGFuZGxlIiwicmVmZXRjaE9uV2luZG93Rm9jdXMiLCJ2aXNpYmlsaXR5SGFuZGxlciIsImRvY3VtZW50IiwidmlzaWJpbGl0eVN0YXRlIiwiaXNPbmxpbmUiLCJzaG91bGRSZWZldGNoIiwicmVmZXRjaEludGVydmFsVGltZXIiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ1c2VNZW1vIiwibmV3U2Vzc2lvbiIsIlByb3ZpZGVyIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next-auth/react.js\n");

/***/ })

};
;